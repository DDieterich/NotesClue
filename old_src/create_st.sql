
select '=== CLUE create_st ===' as SCRIPT_NAME from dual;

-- Script File "create_st"
--    Create Sub-type Packages and Views

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --




create view accusation
      (id
      ,player_id
      ,seq
      ,resolved
      )
   as select
       id
      ,player_id
      ,seq
      ,resolved
       from  actions
       where actions_sub_type = 'accusation'
/
select 'ACCUSATION' as "View:"
 from  user_errors
 where name  = 'ACCUSATION'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION'
  and  type = 'VIEW'
 order by sequence
/

comment on table accusation is 'Accusation Action'
/

comment on column accusation.id is 'Surrogate Primary Key for these actions'
/
comment on column accusation.player_id is 'Player that took this Action'
/
comment on column accusation.seq is 'Sequence Number for this Action'
/
comment on column accusation.resolved is 'Resolved Status for this Action'
/

alter view accusation add constraint accusation_pk
   primary key (id) disable
/

alter view accusation add constraint accusation_fk1
   foreign key (player_id) references players_ACT (id) disable
/

create view accusation_act
      (id
      ,player_id
      ,players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      ,resolved
      )
   as select
       id
      ,player_id
      ,players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      ,resolved
       from  actions_act
       where actions_sub_type = 'accusation'
/
select 'ACCUSATION_ACT' as "View:"
 from  user_errors
 where name  = 'ACCUSATION_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table accusation_act is 'Accusation Action'
/

comment on column accusation_act.id is 'Surrogate Primary Key for these actions'
/
comment on column accusation_act.player_id is 'Player that took this Action'
/
comment on column accusation_act.players_nk1 is 'PLAYERS Natural Key 1: GAMES NK1: USERS NK1: Clue Notes User Name'
/
comment on column accusation_act.players_nk2 is 'PLAYERS Natural Key 2: GAMES NK2: User''s Game Name'
/
comment on column accusation_act.players_nk3 is 'PLAYERS Natural Key 3: Player''s Name'
/
comment on column accusation_act.seq is 'Sequence Number for this Action'
/
comment on column accusation_act.resolved is 'Resolved Status for this Action'
/

alter view accusation_act add constraint accusation_act_pk
   primary key (id) disable
/

alter view accusation_act add constraint accusation_act_fk1
   foreign key (player_id) references players_ACT (id) disable
/

CREATE type accusation_vobj
is
   -- Accusation Active View (Virtual) Record Type
object
   (id  NUMBER(38)
   ,player_id  NUMBER(38)
   ,players_nk1  VARCHAR2(320)
   ,players_nk2  VARCHAR2(320)
   ,players_nk3  VARCHAR2(15)
   ,seq  NUMBER(3)
   ,resolved  VARCHAR2(3)
   )
/
select 'ACCUSATION_VOBJ' as "Type:"
 from  user_errors
 where name  = 'ACCUSATION_VOBJ'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_VOBJ'
  and  type = 'TYPE'
 order by sequence
/

CREATE type accusation_vtab
is
   -- Accusation Active View (Virtual) Table Type
table of accusation_vobj
/
select 'ACCUSATION_VTAB' as "Type:"
 from  user_errors
 where name  = 'ACCUSATION_VTAB'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_VTAB'
  and  type = 'TYPE'
 order by sequence
/

create package accusation_dml
is

   -- Package Accusation_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   -- Return the next Surrogate Key ID for actions
   --   This always references the base table
   function get_next_id
      return NUMBER;
   -- Return the current Surrogate Key ID for actions
   --   NOTE: This will return an ERROR if get_next_id has not been called
   --   This always references the base table
   function get_curr_id
      return NUMBER;

   -- The Natural Keys are inherited from the base table

   -- Return the Surrogate Key ID for the Natural Keys of actions
   --   NOTE: The fields used in this function are the Natural Keys for actions
   --         Alternatively, the Natural Key IDs for actions are:
   --            -) player_id
   --            -) seq
   function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ,seq  in  NUMBER
      ) return NUMBER;
   -- Return a concatenated string of Natural Keys for a actions id
   function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2;
   -- For all the Natural Key Column IDs, Return an ID
   function get_id2
      (player_id_in  in  NUMBER
      ,seq_in  in  NUMBER
      ) return NUMBER;

   -- Set a "view" record to null
   procedure clear
      (n_rec  in out nocopy  accusation_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_rec  in out nocopy  accusation_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record to null
   procedure clear
      (n_tab  in out nocopy  accusation%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_tab  in out nocopy  accusation%ROWTYPE
      ) return varchar2;

   -- Set a "view" record from a accusation ID
   procedure get_rec_by_id
      (n_rec  in out nocopy  accusation_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_rec  in out nocopy  accusation_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record from a accusation ID
   procedure get_rec_by_id
      (n_tab  in out nocopy  accusation%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_tab  in out nocopy  accusation%ROWTYPE
      ) return varchar2;

   -- NOTE: All INS procedures will run faster with a null ID
   --       because it avoids a history search for duplicate IDs
   --
   -- Insert a accusation ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the function will run faster,
   --       but the returned record may contain invalid data
   procedure ins
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   procedure ins
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- Insert columns for actions ACTIVE View
   --   without returning updated data in each column
   procedure ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Insert columns for accusation ACTIVE View
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;
   -- Insert columns for accusation Table
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;

   -- Update a accusation ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the returned record
   --       may contain invalid data
   -- Used by the BU Trigger on the view, avoid if possible
   procedure upd
      (old_rec  in  accusation_act%ROWTYPE
      ,new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (old_rec  in  accusation_act%ROWTYPE
      ,new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- NOTE: Only FK NKs that are part of this NK will be used to find
   --       this ID from its NKs (FK IDs will be ignored)
   procedure upd
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- NOTE: accusationID must be supplied (NK lookup will not be performed)
   procedure upd
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- Update columns for accusation ACTIVE View
   --   without returning updated data in each column
   procedure upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Update columns for accusation ACTIVE View
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;
   -- Update columns for accusation Table
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;

   -- Application Delete procedure without updated parameters
   --    The Natural Keys are inherited from the base table
   procedure del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      );
   -- This function traps and returns any error message from the del procedure
   function del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2;
   -- Application Delete procedure with updated parameters
   --    The Natural Keys are inherited from the base table
   procedure del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in NUMBER default null
      ,players_nk1_in  in VARCHAR2 default null
      ,players_nk2_in  in VARCHAR2 default null
      ,players_nk3_in  in VARCHAR2 default null
      ,seq_in  in NUMBER default null
      );
   -- This function traps and returns any error message from the del2 procedure
   function del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in NUMBER default null
      ,players_nk1_in  in VARCHAR2 default null
      ,players_nk2_in  in VARCHAR2 default null
      ,players_nk3_in  in VARCHAR2 default null
      ,seq_in  in NUMBER default null
      ) return varchar2;

   -- Special Data Warehouse Dimension Function
   --   Attempts to find matching record based on natural keys
   --   If found, performs updates on non-NK columns that changed
   --   If not found, inserts new record
   --   Returns ID of record
   procedure load_dim
      (dim_tab  in out nocopy  accusation%ROWTYPE
      );
   -- This function traps and returns any error message from the load_dim procedure
   function load_dim
      (dim_tab  in out nocopy  accusation%ROWTYPE
      ) return varchar2;

end accusation_dml;
/
select 'ACCUSATION_DML' as "Package:"
 from  user_errors
 where name  = 'ACCUSATION_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body accusation_dml
is

   -- Package Body Accusation_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


--------------------------------------------
-- Return the next Surrogate Key ID for actions
function get_next_id
      return NUMBER
is
   retid  NUMBER;
begin
   select actions_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
--------------------------------------------
-- Return the current Surrogate Key ID for actions
function get_curr_id
      return NUMBER
is
   retid  NUMBER;
begin
   select actions_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
--------------------------------------------
-- Return the next Surrogate Key ID for the Natural Keys of actions
function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ,seq  in  NUMBER
      ) return NUMBER
is
begin
   return actions_tab.get_id
      (players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      );
end get_id;
----------------------------------------
-- For all the Natural Key Column IDs, Return an ID
function get_id2
      (player_id_in  in  NUMBER
      ,seq_in  in  NUMBER
      ) return NUMBER
is
   retid  NUMBER(38);
begin
   select id
    into  retid
    from  actions  ACT
    where player_id_in = ACT.player_id
     and  seq_in = ACT.seq
    ;
   return retid;
exception when no_data_found then return null;
end get_id2;
--------------------------------------------
-- Return a concatenated string of Natural Keys for a actions id
function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2
is
begin
   return actions_tab.get_nk(id_in);
end get_nk;

--------------------------------------------
-- Set a "view" record to null
procedure clear
      (n_rec  in out nocopy  accusation_ACT%ROWTYPE
      )
is
begin
   n_rec.id := null;
   n_rec.player_id := null;
   n_rec.players_nk1 := null;
   n_rec.players_nk2 := null;
   n_rec.players_nk3 := null;
   n_rec.seq := null;
   n_rec.resolved := null;
end clear;
----------
function clear
      (n_rec  in out nocopy  accusation_ACT%ROWTYPE
      ) return varchar2
is
begin
   clear(n_rec);
   return '';
exception when others then return sqlerrm;
end clear;
--------------------------------------------
-- Set a "table" record to null
procedure clear
      (n_tab  in out nocopy  accusation%ROWTYPE
      )
is
begin
   n_tab.id := null;
   n_tab.player_id := null;
   n_tab.seq := null;
   n_tab.resolved := null;
end clear;
----------
function clear
      (n_tab  in out nocopy  accusation%ROWTYPE
      ) return varchar2
is
begin
   clear(n_tab);
   return '';
exception when others then return sqlerrm;
end clear;
----------------------------------------
procedure get_rec_by_id
      (n_rec  in out nocopy  accusation_act%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_rec.id is null then
      clear(n_rec);
   else
      select * into n_rec from accusation_act
       where id = n_rec.id;
   end if;
   return;
   util.trc_time_interval('accusation_dml.get_rec_by_id(act rec) ID:' || n_rec.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_rec  in out nocopy  accusation_act%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_rec);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
----------------------------------------
procedure get_rec_by_id
      (n_tab  in out nocopy  accusation%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_tab.id is null then
      clear(n_tab);
   else
      select * into n_tab from accusation
       where id = n_tab.id;
   end if;
   return;
   util.trc_time_interval('accusation_dml.get_rec_by_id(tab rec) ID:' || n_tab.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_tab  in out nocopy  accusation%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_tab);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
--------------------------------------------
-- Insert a accusation ACTIVE View Record
procedure ins
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_act.id := new_rec.id;
   new_act.player_id := new_rec.player_id;
   new_act.players_nk1 := new_rec.players_nk1;
   new_act.players_nk2 := new_rec.players_nk2;
   new_act.players_nk3 := new_rec.players_nk3;
   new_act.seq := new_rec.seq;
   new_act.resolved := new_rec.resolved;
   new_act.actions_sub_type := 'accusation';
   actions_dml.ins(new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
   end if;
   return;
   util.trc_time_interval('accusation_dml.ins(act rec) ID:' || new_rec.id, start_tstamp);
end ins;
----------
function ins
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert a accusation Table Record
procedure ins
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_base  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_base.id := new_tab.id;
   new_base.player_id := new_tab.player_id;
   new_base.seq := new_tab.seq;
   new_base.resolved := new_tab.resolved;
   new_base.actions_sub_type := 'accusation';
   actions_tab.ins(new_base);
   if upd_vals_in then
      new_tab.id := new_base.id;
      new_tab.player_id := new_base.player_id;
      new_tab.seq := new_base.seq;
      new_tab.resolved := new_base.resolved;
   end if;
   return;
   util.trc_time_interval('accusation_dml.ins(tab rec) ID:' || new_tab.id, start_tstamp);
end ins;
----------
function ins
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_tab, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert columns for actions ACTIVE View
procedure ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.player_id := player_id_in;
   new_rec.players_nk1 := players_nk1_in;
   new_rec.players_nk2 := players_nk2_in;
   new_rec.players_nk3 := players_nk3_in;
   new_rec.seq := seq_in;
   new_rec.resolved := resolved_in;
   new_rec.actions_sub_type := 'accusation';
   actions_dml.ins(new_rec, FALSE);
   return;
   util.trc_time_interval('accusation_dml.ins(act_col) ID:' || id_in, start_tstamp);
end ins;
----------
function ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
    ins
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      ,resolved_in
      );
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert columns for accusation ACTIVE View
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.players_nk1 := players_nk1_io;
   new_rec.players_nk2 := players_nk2_io;
   new_rec.players_nk3 := players_nk3_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'accusation';
   --
   actions_dml.ins(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   players_nk1_io := new_rec.players_nk1;
   players_nk2_io := new_rec.players_nk2;
   players_nk3_io := new_rec.players_nk3;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('accusation_dml.ins2(act col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,player_id_io
      ,players_nk1_io
      ,players_nk2_io
      ,players_nk3_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
--------------------------------------------
-- Insert columns for accusation Table
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'accusation';
   --
   actions_tab.ins(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('accusation_dml.ins2(tab col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,player_id_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
--------------------------------------------
-- Used by the BU Trigger on the view, avoid if possible
procedure upd
      (old_rec  in  accusation_act%ROWTYPE
      ,new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   old_act  actions_act%ROWTYPE;
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_act.id := old_rec.id;
   new_act.id := new_rec.id;
   old_act.player_id := old_rec.player_id;
   new_act.player_id := new_rec.player_id;
   old_act.players_nk1 := old_rec.players_nk1;
   new_act.players_nk1 := new_rec.players_nk1;
   old_act.players_nk2 := old_rec.players_nk2;
   new_act.players_nk2 := new_rec.players_nk2;
   old_act.players_nk3 := old_rec.players_nk3;
   new_act.players_nk3 := new_rec.players_nk3;
   old_act.seq := old_rec.seq;
   new_act.seq := new_rec.seq;
   old_act.resolved := old_rec.resolved;
   new_act.resolved := new_rec.resolved;
   -- Run the update
   old_act.actions_sub_type := 'accusation';
   new_act.actions_sub_type := 'accusation';
   actions_dml.upd(old_act, new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
   end if;
   return;
   util.trc_time_interval('accusation_dml.upd(trigger) ID:' || old_rec.id, start_tstamp);
end upd;
----------
function upd
      (old_rec  in  accusation_act%ROWTYPE
      ,new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(old_rec, new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update a accusation ACTIVE View Record
procedure upd
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
      new_act.id := new_rec.id;
      new_act.player_id := new_rec.player_id;
      new_act.players_nk1 := new_rec.players_nk1;
      new_act.players_nk2 := new_rec.players_nk2;
      new_act.players_nk3 := new_rec.players_nk3;
      new_act.seq := new_rec.seq;
      new_act.resolved := new_rec.resolved;
   new_act.actions_sub_type := 'accusation';
   actions_dml.upd(new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
   end if;
   return;
   util.trc_time_interval('accusation_dml.upd(act rec) ID:' || new_rec.id, start_tstamp);
end upd;
----------
function upd
      (new_rec  in out nocopy  accusation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   upd(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update a accusation Table Record
procedure upd
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   new_base  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_base.id := new_tab.id;
   new_base.player_id := new_tab.player_id;
   new_base.seq := new_tab.seq;
   new_base.resolved := new_tab.resolved;
   new_base.actions_sub_type := 'accusation';
   actions_dml.upd(new_base);
   if upd_vals_in then
      new_tab.id := new_base.id;
      new_tab.player_id := new_base.player_id;
      new_tab.seq := new_base.seq;
      new_tab.resolved := new_base.resolved;
   end if;
   return;
   util.trc_time_interval('accusation_dml.upd(tab rec) ID:' || new_tab.id, start_tstamp);
end upd;
----------
function upd
      (new_tab  in out nocopy  accusation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(new_tab, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update columns for accusation ACTIVE View
procedure upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.player_id := player_id_in;
   new_rec.players_nk1 := players_nk1_in;
   new_rec.players_nk2 := players_nk2_in;
   new_rec.players_nk3 := players_nk3_in;
   new_rec.seq := seq_in;
   new_rec.resolved := resolved_in;
   new_rec.actions_sub_type := 'accusation';
   actions_dml.upd(new_rec, FALSE);
   return;
   util.trc_time_interval('accusation_dml.upd(act col) ID:' || id_in, start_tstamp);
end upd;
----------
function upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   upd
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      ,resolved_in
      );
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update columns for accusation ACTIVE View
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.players_nk1 := players_nk1_io;
   new_rec.players_nk2 := players_nk2_io;
   new_rec.players_nk3 := players_nk3_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'accusation';
   --
   actions_dml.upd(new_rec, TRUE);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   players_nk1_io := new_rec.players_nk1;
   players_nk2_io := new_rec.players_nk2;
   players_nk3_io := new_rec.players_nk3;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('accusation_dmlupd2(act col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   upd2
      (id_io
      ,player_id_io
      ,players_nk1_io
      ,players_nk2_io
      ,players_nk3_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
--------------------------------------------
-- Update columns for accusation Table
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'accusation';
   --
   actions_dml.upd(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('accusation_dmlupd2(tab col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   upd2
      (id_io
      ,player_id_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
----------------------------------------
-- Application Delete procedure without updated parameters
procedure del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   actions_dml.del
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return;
   util.trc_time_interval('accusation_dml.del ID:' || id_in, start_tstamp);
end del;
----------
function del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2
is
begin
   del
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return '';
exception when others then return sqlerrm;
end del;
----------------------------------------
-- Application Delete procedure with updated parameters
procedure del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   actions_dml.del2
      (id_io
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return;
   util.trc_time_interval('accusation_dml.del2 ID:' || id_io, start_tstamp);
end del2;
----------
function del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2
is
begin
   del2
      (id_io
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return '';
exception when others then return sqlerrm;
end del2;
--------------------------------------------
-- Special Data Warehouse Dimension Function
procedure load_dim
      (dim_tab  in out nocopy  accusation%ROWTYPE
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := dim_tab.id;
   new_rec.player_id := dim_tab.player_id;
   new_rec.seq := dim_tab.seq;
   new_rec.resolved := dim_tab.resolved;
   new_rec.actions_sub_type := 'accusation';
   --
   actions_dml.load_dim(new_rec);
   return;
   util.trc_time_interval('accusation_dmlload_dim ID:' || dim_tab.id, start_tstamp);
end load_dim;
----------
function load_dim
      (dim_tab  in out nocopy  accusation%ROWTYPE
      ) return varchar2
is
begin
   load_dim(dim_tab);
   return '';
exception when others then return sqlerrm;
end load_dim;
--------------------------------------------

end accusation_dml;
/
select 'ACCUSATION_DML' as "Package Body:"
 from  user_errors
 where name  = 'ACCUSATION_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create TRIGGER accusation_ioi
   instead of insert on accusation
   for each row
declare

   -- Trigger Accusation_Ioi

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := :new.id;
   new_rec.player_id := :new.player_id;
   new_rec.seq := :new.seq;
   new_rec.resolved := :new.resolved;
   new_rec.actions_sub_type := 'accusation';
   actions_tab.ins(new_rec);
   util.trc_time_interval('accusation_ioi trigger ID:' || :new.id, start_tstamp);
end accusation_ioi;
/
select 'ACCUSATION_IOI' as "Trigger:"
 from  user_errors
 where name  = 'ACCUSATION_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER accusation_iou
   instead of update on accusation
   for each row
declare

   -- Trigger Accusation_Iou

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   old_rec  actions%ROWTYPE;
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_rec.id := :old.id;
   new_rec.id := :new.id;
   old_rec.player_id := :old.player_id;
   new_rec.player_id := :new.player_id;
   old_rec.seq := :old.seq;
   new_rec.seq := :new.seq;
   old_rec.resolved := :old.resolved;
   new_rec.resolved := :new.resolved;
   old_rec.actions_sub_type := 'accusation';
   new_rec.actions_sub_type := 'accusation';
   actions_tab.upd(old_rec, new_rec);
   util.trc_time_interval('accusation_iou trigger ID:' || :old.id, start_tstamp);
end accusation_iou;
/
select 'ACCUSATION_IOU' as "Trigger:"
 from  user_errors
 where name  = 'ACCUSATION_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER accusation_iod
   instead of delete on accusation
   for each row
declare

   -- Trigger Accusation_Iod

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   start_tstamp  timestamp := systimestamp;
begin
   actions_tab.del(:old.id);
   util.trc_time_interval('accusation_iod trigger ID:' || :old.id, start_tstamp);
end accusation_iod;
/
select 'ACCUSATION_IOD' as "Trigger:"
 from  user_errors
 where name  = 'ACCUSATION_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER accusation_act_ioi
   instead of insert on accusation_act
   for each row
declare

   -- Trigger Accusation_Act_Ioi

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := :new.id;
   new_rec.player_id := :new.player_id;
   new_rec.players_nk1 := :new.players_nk1;
   new_rec.players_nk2 := :new.players_nk2;
   new_rec.players_nk3 := :new.players_nk3;
   new_rec.seq := :new.seq;
   new_rec.resolved := :new.resolved;
   new_rec.actions_sub_type := 'accusation';
   actions_dml.ins(new_rec, FALSE);
   util.trc_time_interval('accusation_act_ioi trigger ID:' || :new.id, start_tstamp);
end accusation_act_ioi;
/
select 'ACCUSATION_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'ACCUSATION_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER accusation_act_iou
   instead of update on accusation_act
   for each row
declare

   -- Trigger Accusation_Act_Iou

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   old_rec  actions_act%ROWTYPE;
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_rec.id := :old.id;
   new_rec.id := :new.id;
   old_rec.player_id := :old.player_id;
   new_rec.player_id := :new.player_id;
   old_rec.players_nk1 := :old.players_nk1;
   new_rec.players_nk1 := :new.players_nk1;
   old_rec.players_nk2 := :old.players_nk2;
   new_rec.players_nk2 := :new.players_nk2;
   old_rec.players_nk3 := :old.players_nk3;
   new_rec.players_nk3 := :new.players_nk3;
   old_rec.seq := :old.seq;
   new_rec.seq := :new.seq;
   old_rec.resolved := :old.resolved;
   new_rec.resolved := :new.resolved;
   old_rec.actions_sub_type := 'accusation';
   new_rec.actions_sub_type := 'accusation';
   actions_dml.upd(old_rec, new_rec);
   util.trc_time_interval('accusation_act_iou trigger ID:' || :old.id, start_tstamp);
end accusation_act_iou;
/
select 'ACCUSATION_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'ACCUSATION_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER accusation_act_iod
   instead of delete on accusation_act
   for each row
declare

   -- Trigger Accusation_Act_Iod

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   start_tstamp  timestamp := systimestamp;
begin
   actions_tab.del(:old.id);
   util.trc_time_interval('accusation_act_iod trigger ID:' || :old.id, start_tstamp);
end accusation_act_iod;
/
select 'ACCUSATION_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'ACCUSATION_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'ACCUSATION_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/


create view revelation
      (id
      ,player_id
      ,seq
      ,resolved
      )
   as select
       id
      ,player_id
      ,seq
      ,resolved
       from  actions
       where actions_sub_type = 'revelation'
/
select 'REVELATION' as "View:"
 from  user_errors
 where name  = 'REVELATION'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION'
  and  type = 'VIEW'
 order by sequence
/

comment on table revelation is 'Revelation Action'
/

comment on column revelation.id is 'Surrogate Primary Key for these actions'
/
comment on column revelation.player_id is 'Player that took this Action'
/
comment on column revelation.seq is 'Sequence Number for this Action'
/
comment on column revelation.resolved is 'Resolved Status for this Action'
/

alter view revelation add constraint revelation_pk
   primary key (id) disable
/

alter view revelation add constraint revelation_fk1
   foreign key (player_id) references players_ACT (id) disable
/

create view revelation_act
      (id
      ,player_id
      ,players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      ,resolved
      )
   as select
       id
      ,player_id
      ,players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      ,resolved
       from  actions_act
       where actions_sub_type = 'revelation'
/
select 'REVELATION_ACT' as "View:"
 from  user_errors
 where name  = 'REVELATION_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table revelation_act is 'Revelation Action'
/

comment on column revelation_act.id is 'Surrogate Primary Key for these actions'
/
comment on column revelation_act.player_id is 'Player that took this Action'
/
comment on column revelation_act.players_nk1 is 'PLAYERS Natural Key 1: GAMES NK1: USERS NK1: Clue Notes User Name'
/
comment on column revelation_act.players_nk2 is 'PLAYERS Natural Key 2: GAMES NK2: User''s Game Name'
/
comment on column revelation_act.players_nk3 is 'PLAYERS Natural Key 3: Player''s Name'
/
comment on column revelation_act.seq is 'Sequence Number for this Action'
/
comment on column revelation_act.resolved is 'Resolved Status for this Action'
/

alter view revelation_act add constraint revelation_act_pk
   primary key (id) disable
/

alter view revelation_act add constraint revelation_act_fk1
   foreign key (player_id) references players_ACT (id) disable
/

CREATE type revelation_vobj
is
   -- Revelation Active View (Virtual) Record Type
object
   (id  NUMBER(38)
   ,player_id  NUMBER(38)
   ,players_nk1  VARCHAR2(320)
   ,players_nk2  VARCHAR2(320)
   ,players_nk3  VARCHAR2(15)
   ,seq  NUMBER(3)
   ,resolved  VARCHAR2(3)
   )
/
select 'REVELATION_VOBJ' as "Type:"
 from  user_errors
 where name  = 'REVELATION_VOBJ'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_VOBJ'
  and  type = 'TYPE'
 order by sequence
/

CREATE type revelation_vtab
is
   -- Revelation Active View (Virtual) Table Type
table of revelation_vobj
/
select 'REVELATION_VTAB' as "Type:"
 from  user_errors
 where name  = 'REVELATION_VTAB'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_VTAB'
  and  type = 'TYPE'
 order by sequence
/

create package revelation_dml
is

   -- Package Revelation_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   -- Return the next Surrogate Key ID for actions
   --   This always references the base table
   function get_next_id
      return NUMBER;
   -- Return the current Surrogate Key ID for actions
   --   NOTE: This will return an ERROR if get_next_id has not been called
   --   This always references the base table
   function get_curr_id
      return NUMBER;

   -- The Natural Keys are inherited from the base table

   -- Return the Surrogate Key ID for the Natural Keys of actions
   --   NOTE: The fields used in this function are the Natural Keys for actions
   --         Alternatively, the Natural Key IDs for actions are:
   --            -) player_id
   --            -) seq
   function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ,seq  in  NUMBER
      ) return NUMBER;
   -- Return a concatenated string of Natural Keys for a actions id
   function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2;
   -- For all the Natural Key Column IDs, Return an ID
   function get_id2
      (player_id_in  in  NUMBER
      ,seq_in  in  NUMBER
      ) return NUMBER;

   -- Set a "view" record to null
   procedure clear
      (n_rec  in out nocopy  revelation_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_rec  in out nocopy  revelation_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record to null
   procedure clear
      (n_tab  in out nocopy  revelation%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_tab  in out nocopy  revelation%ROWTYPE
      ) return varchar2;

   -- Set a "view" record from a revelation ID
   procedure get_rec_by_id
      (n_rec  in out nocopy  revelation_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_rec  in out nocopy  revelation_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record from a revelation ID
   procedure get_rec_by_id
      (n_tab  in out nocopy  revelation%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_tab  in out nocopy  revelation%ROWTYPE
      ) return varchar2;

   -- NOTE: All INS procedures will run faster with a null ID
   --       because it avoids a history search for duplicate IDs
   --
   -- Insert a revelation ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the function will run faster,
   --       but the returned record may contain invalid data
   procedure ins
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   procedure ins
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- Insert columns for actions ACTIVE View
   --   without returning updated data in each column
   procedure ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Insert columns for revelation ACTIVE View
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;
   -- Insert columns for revelation Table
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;

   -- Update a revelation ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the returned record
   --       may contain invalid data
   -- Used by the BU Trigger on the view, avoid if possible
   procedure upd
      (old_rec  in  revelation_act%ROWTYPE
      ,new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (old_rec  in  revelation_act%ROWTYPE
      ,new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- NOTE: Only FK NKs that are part of this NK will be used to find
   --       this ID from its NKs (FK IDs will be ignored)
   procedure upd
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- NOTE: revelationID must be supplied (NK lookup will not be performed)
   procedure upd
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- Update columns for revelation ACTIVE View
   --   without returning updated data in each column
   procedure upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Update columns for revelation ACTIVE View
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;
   -- Update columns for revelation Table
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2;

   -- Application Delete procedure without updated parameters
   --    The Natural Keys are inherited from the base table
   procedure del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      );
   -- This function traps and returns any error message from the del procedure
   function del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2;
   -- Application Delete procedure with updated parameters
   --    The Natural Keys are inherited from the base table
   procedure del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in NUMBER default null
      ,players_nk1_in  in VARCHAR2 default null
      ,players_nk2_in  in VARCHAR2 default null
      ,players_nk3_in  in VARCHAR2 default null
      ,seq_in  in NUMBER default null
      );
   -- This function traps and returns any error message from the del2 procedure
   function del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in NUMBER default null
      ,players_nk1_in  in VARCHAR2 default null
      ,players_nk2_in  in VARCHAR2 default null
      ,players_nk3_in  in VARCHAR2 default null
      ,seq_in  in NUMBER default null
      ) return varchar2;

   -- Special Data Warehouse Dimension Function
   --   Attempts to find matching record based on natural keys
   --   If found, performs updates on non-NK columns that changed
   --   If not found, inserts new record
   --   Returns ID of record
   procedure load_dim
      (dim_tab  in out nocopy  revelation%ROWTYPE
      );
   -- This function traps and returns any error message from the load_dim procedure
   function load_dim
      (dim_tab  in out nocopy  revelation%ROWTYPE
      ) return varchar2;

end revelation_dml;
/
select 'REVELATION_DML' as "Package:"
 from  user_errors
 where name  = 'REVELATION_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body revelation_dml
is

   -- Package Body Revelation_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


--------------------------------------------
-- Return the next Surrogate Key ID for actions
function get_next_id
      return NUMBER
is
   retid  NUMBER;
begin
   select actions_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
--------------------------------------------
-- Return the current Surrogate Key ID for actions
function get_curr_id
      return NUMBER
is
   retid  NUMBER;
begin
   select actions_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
--------------------------------------------
-- Return the next Surrogate Key ID for the Natural Keys of actions
function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ,seq  in  NUMBER
      ) return NUMBER
is
begin
   return actions_tab.get_id
      (players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      );
end get_id;
----------------------------------------
-- For all the Natural Key Column IDs, Return an ID
function get_id2
      (player_id_in  in  NUMBER
      ,seq_in  in  NUMBER
      ) return NUMBER
is
   retid  NUMBER(38);
begin
   select id
    into  retid
    from  actions  ACT
    where player_id_in = ACT.player_id
     and  seq_in = ACT.seq
    ;
   return retid;
exception when no_data_found then return null;
end get_id2;
--------------------------------------------
-- Return a concatenated string of Natural Keys for a actions id
function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2
is
begin
   return actions_tab.get_nk(id_in);
end get_nk;

--------------------------------------------
-- Set a "view" record to null
procedure clear
      (n_rec  in out nocopy  revelation_ACT%ROWTYPE
      )
is
begin
   n_rec.id := null;
   n_rec.player_id := null;
   n_rec.players_nk1 := null;
   n_rec.players_nk2 := null;
   n_rec.players_nk3 := null;
   n_rec.seq := null;
   n_rec.resolved := null;
end clear;
----------
function clear
      (n_rec  in out nocopy  revelation_ACT%ROWTYPE
      ) return varchar2
is
begin
   clear(n_rec);
   return '';
exception when others then return sqlerrm;
end clear;
--------------------------------------------
-- Set a "table" record to null
procedure clear
      (n_tab  in out nocopy  revelation%ROWTYPE
      )
is
begin
   n_tab.id := null;
   n_tab.player_id := null;
   n_tab.seq := null;
   n_tab.resolved := null;
end clear;
----------
function clear
      (n_tab  in out nocopy  revelation%ROWTYPE
      ) return varchar2
is
begin
   clear(n_tab);
   return '';
exception when others then return sqlerrm;
end clear;
----------------------------------------
procedure get_rec_by_id
      (n_rec  in out nocopy  revelation_act%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_rec.id is null then
      clear(n_rec);
   else
      select * into n_rec from revelation_act
       where id = n_rec.id;
   end if;
   return;
   util.trc_time_interval('revelation_dml.get_rec_by_id(act rec) ID:' || n_rec.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_rec  in out nocopy  revelation_act%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_rec);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
----------------------------------------
procedure get_rec_by_id
      (n_tab  in out nocopy  revelation%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_tab.id is null then
      clear(n_tab);
   else
      select * into n_tab from revelation
       where id = n_tab.id;
   end if;
   return;
   util.trc_time_interval('revelation_dml.get_rec_by_id(tab rec) ID:' || n_tab.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_tab  in out nocopy  revelation%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_tab);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
--------------------------------------------
-- Insert a revelation ACTIVE View Record
procedure ins
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_act.id := new_rec.id;
   new_act.player_id := new_rec.player_id;
   new_act.players_nk1 := new_rec.players_nk1;
   new_act.players_nk2 := new_rec.players_nk2;
   new_act.players_nk3 := new_rec.players_nk3;
   new_act.seq := new_rec.seq;
   new_act.resolved := new_rec.resolved;
   new_act.actions_sub_type := 'revelation';
   actions_dml.ins(new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
   end if;
   return;
   util.trc_time_interval('revelation_dml.ins(act rec) ID:' || new_rec.id, start_tstamp);
end ins;
----------
function ins
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert a revelation Table Record
procedure ins
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_base  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_base.id := new_tab.id;
   new_base.player_id := new_tab.player_id;
   new_base.seq := new_tab.seq;
   new_base.resolved := new_tab.resolved;
   new_base.actions_sub_type := 'revelation';
   actions_tab.ins(new_base);
   if upd_vals_in then
      new_tab.id := new_base.id;
      new_tab.player_id := new_base.player_id;
      new_tab.seq := new_base.seq;
      new_tab.resolved := new_base.resolved;
   end if;
   return;
   util.trc_time_interval('revelation_dml.ins(tab rec) ID:' || new_tab.id, start_tstamp);
end ins;
----------
function ins
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_tab, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert columns for actions ACTIVE View
procedure ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.player_id := player_id_in;
   new_rec.players_nk1 := players_nk1_in;
   new_rec.players_nk2 := players_nk2_in;
   new_rec.players_nk3 := players_nk3_in;
   new_rec.seq := seq_in;
   new_rec.resolved := resolved_in;
   new_rec.actions_sub_type := 'revelation';
   actions_dml.ins(new_rec, FALSE);
   return;
   util.trc_time_interval('revelation_dml.ins(act_col) ID:' || id_in, start_tstamp);
end ins;
----------
function ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
    ins
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      ,resolved_in
      );
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert columns for revelation ACTIVE View
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.players_nk1 := players_nk1_io;
   new_rec.players_nk2 := players_nk2_io;
   new_rec.players_nk3 := players_nk3_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'revelation';
   --
   actions_dml.ins(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   players_nk1_io := new_rec.players_nk1;
   players_nk2_io := new_rec.players_nk2;
   players_nk3_io := new_rec.players_nk3;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('revelation_dml.ins2(act col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,player_id_io
      ,players_nk1_io
      ,players_nk2_io
      ,players_nk3_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
--------------------------------------------
-- Insert columns for revelation Table
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'revelation';
   --
   actions_tab.ins(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('revelation_dml.ins2(tab col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,player_id_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
--------------------------------------------
-- Used by the BU Trigger on the view, avoid if possible
procedure upd
      (old_rec  in  revelation_act%ROWTYPE
      ,new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   old_act  actions_act%ROWTYPE;
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_act.id := old_rec.id;
   new_act.id := new_rec.id;
   old_act.player_id := old_rec.player_id;
   new_act.player_id := new_rec.player_id;
   old_act.players_nk1 := old_rec.players_nk1;
   new_act.players_nk1 := new_rec.players_nk1;
   old_act.players_nk2 := old_rec.players_nk2;
   new_act.players_nk2 := new_rec.players_nk2;
   old_act.players_nk3 := old_rec.players_nk3;
   new_act.players_nk3 := new_rec.players_nk3;
   old_act.seq := old_rec.seq;
   new_act.seq := new_rec.seq;
   old_act.resolved := old_rec.resolved;
   new_act.resolved := new_rec.resolved;
   -- Run the update
   old_act.actions_sub_type := 'revelation';
   new_act.actions_sub_type := 'revelation';
   actions_dml.upd(old_act, new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
   end if;
   return;
   util.trc_time_interval('revelation_dml.upd(trigger) ID:' || old_rec.id, start_tstamp);
end upd;
----------
function upd
      (old_rec  in  revelation_act%ROWTYPE
      ,new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(old_rec, new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update a revelation ACTIVE View Record
procedure upd
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
      new_act.id := new_rec.id;
      new_act.player_id := new_rec.player_id;
      new_act.players_nk1 := new_rec.players_nk1;
      new_act.players_nk2 := new_rec.players_nk2;
      new_act.players_nk3 := new_rec.players_nk3;
      new_act.seq := new_rec.seq;
      new_act.resolved := new_rec.resolved;
   new_act.actions_sub_type := 'revelation';
   actions_dml.upd(new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
   end if;
   return;
   util.trc_time_interval('revelation_dml.upd(act rec) ID:' || new_rec.id, start_tstamp);
end upd;
----------
function upd
      (new_rec  in out nocopy  revelation_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   upd(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update a revelation Table Record
procedure upd
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   new_base  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_base.id := new_tab.id;
   new_base.player_id := new_tab.player_id;
   new_base.seq := new_tab.seq;
   new_base.resolved := new_tab.resolved;
   new_base.actions_sub_type := 'revelation';
   actions_dml.upd(new_base);
   if upd_vals_in then
      new_tab.id := new_base.id;
      new_tab.player_id := new_base.player_id;
      new_tab.seq := new_base.seq;
      new_tab.resolved := new_base.resolved;
   end if;
   return;
   util.trc_time_interval('revelation_dml.upd(tab rec) ID:' || new_tab.id, start_tstamp);
end upd;
----------
function upd
      (new_tab  in out nocopy  revelation%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(new_tab, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update columns for revelation ACTIVE View
procedure upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.player_id := player_id_in;
   new_rec.players_nk1 := players_nk1_in;
   new_rec.players_nk2 := players_nk2_in;
   new_rec.players_nk3 := players_nk3_in;
   new_rec.seq := seq_in;
   new_rec.resolved := resolved_in;
   new_rec.actions_sub_type := 'revelation';
   actions_dml.upd(new_rec, FALSE);
   return;
   util.trc_time_interval('revelation_dml.upd(act col) ID:' || id_in, start_tstamp);
end upd;
----------
function upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   upd
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      ,resolved_in
      );
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update columns for revelation ACTIVE View
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.players_nk1 := players_nk1_io;
   new_rec.players_nk2 := players_nk2_io;
   new_rec.players_nk3 := players_nk3_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'revelation';
   --
   actions_dml.upd(new_rec, TRUE);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   players_nk1_io := new_rec.players_nk1;
   players_nk2_io := new_rec.players_nk2;
   players_nk3_io := new_rec.players_nk3;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('revelation_dmlupd2(act col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   upd2
      (id_io
      ,player_id_io
      ,players_nk1_io
      ,players_nk2_io
      ,players_nk3_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
--------------------------------------------
-- Update columns for revelation Table
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.actions_sub_type := 'revelation';
   --
   actions_dml.upd(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   return;
   util.trc_time_interval('revelation_dmlupd2(tab col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   upd2
      (id_io
      ,player_id_io
      ,seq_io
      ,resolved_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
----------------------------------------
-- Application Delete procedure without updated parameters
procedure del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   actions_dml.del
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return;
   util.trc_time_interval('revelation_dml.del ID:' || id_in, start_tstamp);
end del;
----------
function del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2
is
begin
   del
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return '';
exception when others then return sqlerrm;
end del;
----------------------------------------
-- Application Delete procedure with updated parameters
procedure del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   actions_dml.del2
      (id_io
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return;
   util.trc_time_interval('revelation_dml.del2 ID:' || id_io, start_tstamp);
end del2;
----------
function del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2
is
begin
   del2
      (id_io
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return '';
exception when others then return sqlerrm;
end del2;
--------------------------------------------
-- Special Data Warehouse Dimension Function
procedure load_dim
      (dim_tab  in out nocopy  revelation%ROWTYPE
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := dim_tab.id;
   new_rec.player_id := dim_tab.player_id;
   new_rec.seq := dim_tab.seq;
   new_rec.resolved := dim_tab.resolved;
   new_rec.actions_sub_type := 'revelation';
   --
   actions_dml.load_dim(new_rec);
   return;
   util.trc_time_interval('revelation_dmlload_dim ID:' || dim_tab.id, start_tstamp);
end load_dim;
----------
function load_dim
      (dim_tab  in out nocopy  revelation%ROWTYPE
      ) return varchar2
is
begin
   load_dim(dim_tab);
   return '';
exception when others then return sqlerrm;
end load_dim;
--------------------------------------------

end revelation_dml;
/
select 'REVELATION_DML' as "Package Body:"
 from  user_errors
 where name  = 'REVELATION_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create TRIGGER revelation_ioi
   instead of insert on revelation
   for each row
declare

   -- Trigger Revelation_Ioi

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := :new.id;
   new_rec.player_id := :new.player_id;
   new_rec.seq := :new.seq;
   new_rec.resolved := :new.resolved;
   new_rec.actions_sub_type := 'revelation';
   actions_tab.ins(new_rec);
   util.trc_time_interval('revelation_ioi trigger ID:' || :new.id, start_tstamp);
end revelation_ioi;
/
select 'REVELATION_IOI' as "Trigger:"
 from  user_errors
 where name  = 'REVELATION_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER revelation_iou
   instead of update on revelation
   for each row
declare

   -- Trigger Revelation_Iou

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   old_rec  actions%ROWTYPE;
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_rec.id := :old.id;
   new_rec.id := :new.id;
   old_rec.player_id := :old.player_id;
   new_rec.player_id := :new.player_id;
   old_rec.seq := :old.seq;
   new_rec.seq := :new.seq;
   old_rec.resolved := :old.resolved;
   new_rec.resolved := :new.resolved;
   old_rec.actions_sub_type := 'revelation';
   new_rec.actions_sub_type := 'revelation';
   actions_tab.upd(old_rec, new_rec);
   util.trc_time_interval('revelation_iou trigger ID:' || :old.id, start_tstamp);
end revelation_iou;
/
select 'REVELATION_IOU' as "Trigger:"
 from  user_errors
 where name  = 'REVELATION_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER revelation_iod
   instead of delete on revelation
   for each row
declare

   -- Trigger Revelation_Iod

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   start_tstamp  timestamp := systimestamp;
begin
   actions_tab.del(:old.id);
   util.trc_time_interval('revelation_iod trigger ID:' || :old.id, start_tstamp);
end revelation_iod;
/
select 'REVELATION_IOD' as "Trigger:"
 from  user_errors
 where name  = 'REVELATION_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER revelation_act_ioi
   instead of insert on revelation_act
   for each row
declare

   -- Trigger Revelation_Act_Ioi

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := :new.id;
   new_rec.player_id := :new.player_id;
   new_rec.players_nk1 := :new.players_nk1;
   new_rec.players_nk2 := :new.players_nk2;
   new_rec.players_nk3 := :new.players_nk3;
   new_rec.seq := :new.seq;
   new_rec.resolved := :new.resolved;
   new_rec.actions_sub_type := 'revelation';
   actions_dml.ins(new_rec, FALSE);
   util.trc_time_interval('revelation_act_ioi trigger ID:' || :new.id, start_tstamp);
end revelation_act_ioi;
/
select 'REVELATION_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'REVELATION_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER revelation_act_iou
   instead of update on revelation_act
   for each row
declare

   -- Trigger Revelation_Act_Iou

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   old_rec  actions_act%ROWTYPE;
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_rec.id := :old.id;
   new_rec.id := :new.id;
   old_rec.player_id := :old.player_id;
   new_rec.player_id := :new.player_id;
   old_rec.players_nk1 := :old.players_nk1;
   new_rec.players_nk1 := :new.players_nk1;
   old_rec.players_nk2 := :old.players_nk2;
   new_rec.players_nk2 := :new.players_nk2;
   old_rec.players_nk3 := :old.players_nk3;
   new_rec.players_nk3 := :new.players_nk3;
   old_rec.seq := :old.seq;
   new_rec.seq := :new.seq;
   old_rec.resolved := :old.resolved;
   new_rec.resolved := :new.resolved;
   old_rec.actions_sub_type := 'revelation';
   new_rec.actions_sub_type := 'revelation';
   actions_dml.upd(old_rec, new_rec);
   util.trc_time_interval('revelation_act_iou trigger ID:' || :old.id, start_tstamp);
end revelation_act_iou;
/
select 'REVELATION_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'REVELATION_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER revelation_act_iod
   instead of delete on revelation_act
   for each row
declare

   -- Trigger Revelation_Act_Iod

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   start_tstamp  timestamp := systimestamp;
begin
   actions_tab.del(:old.id);
   util.trc_time_interval('revelation_act_iod trigger ID:' || :old.id, start_tstamp);
end revelation_act_iod;
/
select 'REVELATION_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'REVELATION_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'REVELATION_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/


create view suggestion
      (id
      ,player_id
      ,seq
      ,resolved
      ,res_action_id
      ,rev_player_id
      )
   as select
       id
      ,player_id
      ,seq
      ,resolved
      ,res_action_id
      ,rev_player_id
       from  actions
       where actions_sub_type = 'suggestion'
/
select 'SUGGESTION' as "View:"
 from  user_errors
 where name  = 'SUGGESTION'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION'
  and  type = 'VIEW'
 order by sequence
/

comment on table suggestion is 'Suggestion Action'
/

comment on column suggestion.id is 'Surrogate Primary Key for these actions'
/
comment on column suggestion.player_id is 'Player that took this Action'
/
comment on column suggestion.seq is 'Sequence Number for this Action'
/
comment on column suggestion.resolved is 'Resolved Status for this Action'
/
comment on column suggestion.res_action_id is '(suggestion Sub-type) The current Action when this Suggestion was resolved'
/
comment on column suggestion.rev_player_id is '(suggestion Sub-type) Player that reveled a card for this Suggestion'
/

alter view suggestion add constraint suggestion_pk
   primary key (id) disable
/

alter view suggestion add constraint suggestion_fk1
   foreign key (player_id) references players_ACT (id) disable
/
alter view suggestion add constraint suggestion_fk4
   foreign key (res_action_id) references actions_ACT (id) disable
/
alter view suggestion add constraint suggestion_fk5
   foreign key (rev_player_id) references players_ACT (id) disable
/

create view suggestion_act
      (id
      ,player_id
      ,players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      ,resolved
      ,res_action_id
      ,res_id_path
      ,res_nk_path
      ,res_actions_nk1
      ,res_actions_nk2
      ,res_actions_nk3
      ,res_actions_nk4
      ,rev_player_id
      ,rev_players_nk1
      ,rev_players_nk2
      ,rev_players_nk3
      )
   as select
       id
      ,player_id
      ,players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      ,resolved
      ,res_action_id
      ,res_id_path
      ,res_nk_path
      ,res_actions_nk1
      ,res_actions_nk2
      ,res_actions_nk3
      ,res_actions_nk4
      ,rev_player_id
      ,rev_players_nk1
      ,rev_players_nk2
      ,rev_players_nk3
       from  actions_act
       where actions_sub_type = 'suggestion'
/
select 'SUGGESTION_ACT' as "View:"
 from  user_errors
 where name  = 'SUGGESTION_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table suggestion_act is 'Suggestion Action'
/

comment on column suggestion_act.id is 'Surrogate Primary Key for these actions'
/
comment on column suggestion_act.player_id is 'Player that took this Action'
/
comment on column suggestion_act.players_nk1 is 'PLAYERS Natural Key 1: GAMES NK1: USERS NK1: Clue Notes User Name'
/
comment on column suggestion_act.players_nk2 is 'PLAYERS Natural Key 2: GAMES NK2: User''s Game Name'
/
comment on column suggestion_act.players_nk3 is 'PLAYERS Natural Key 3: Player''s Name'
/
comment on column suggestion_act.seq is 'Sequence Number for this Action'
/
comment on column suggestion_act.resolved is 'Resolved Status for this Action'
/
comment on column suggestion_act.res_action_id is '(suggestion Sub-type) The current Action when this Suggestion was resolved'
/
comment on column suggestion_act.res_id_path is '(suggestion Sub-type) Path of ancestor IDs hierarchy for this record'
/
comment on column suggestion_act.res_nk_path is '(suggestion Sub-type) Path of ancestor Natural Keys hierarchy for this record'
/
comment on column suggestion_act.res_actions_nk1 is '(suggestion Sub-type) ACTIONS Natural Key 1: PLAYERS NK1: GAMES NK1: USERS NK1: Clue Notes User Name'
/
comment on column suggestion_act.res_actions_nk2 is '(suggestion Sub-type) ACTIONS Natural Key 2: PLAYERS NK2: GAMES NK2: User''s Game Name'
/
comment on column suggestion_act.res_actions_nk3 is '(suggestion Sub-type) ACTIONS Natural Key 3: PLAYERS NK3: Player''s Name'
/
comment on column suggestion_act.res_actions_nk4 is '(suggestion Sub-type) ACTIONS Natural Key 4: Sequence Number for this Action'
/
comment on column suggestion_act.rev_player_id is '(suggestion Sub-type) Player that reveled a card for this Suggestion'
/
comment on column suggestion_act.rev_players_nk1 is '(suggestion Sub-type) PLAYERS Natural Key 1: GAMES NK1: USERS NK1: Clue Notes User Name'
/
comment on column suggestion_act.rev_players_nk2 is '(suggestion Sub-type) PLAYERS Natural Key 2: GAMES NK2: User''s Game Name'
/
comment on column suggestion_act.rev_players_nk3 is '(suggestion Sub-type) PLAYERS Natural Key 3: Player''s Name'
/

alter view suggestion_act add constraint suggestion_act_pk
   primary key (id) disable
/

alter view suggestion_act add constraint suggestion_act_fk1
   foreign key (player_id) references players_ACT (id) disable
/
alter view suggestion_act add constraint suggestion_act_fk4
   foreign key (res_action_id) references actions_ACT (id) disable
/
alter view suggestion_act add constraint suggestion_act_fk5
   foreign key (rev_player_id) references players_ACT (id) disable
/

CREATE type suggestion_vobj
is
   -- Suggestion Active View (Virtual) Record Type
object
   (id  NUMBER(38)
   ,player_id  NUMBER(38)
   ,players_nk1  VARCHAR2(320)
   ,players_nk2  VARCHAR2(320)
   ,players_nk3  VARCHAR2(15)
   ,seq  NUMBER(3)
   ,resolved  VARCHAR2(3)
   ,res_action_id  NUMBER(38)
   ,res_id_path  VARCHAR2(4000)
   ,res_nk_path  VARCHAR2(32767)
   ,res_actions_nk1  VARCHAR2(320)
   ,res_actions_nk2  VARCHAR2(320)
   ,res_actions_nk3  VARCHAR2(15)
   ,res_actions_nk4  NUMBER(3)
   ,rev_player_id  NUMBER(38)
   ,rev_players_nk1  VARCHAR2(320)
   ,rev_players_nk2  VARCHAR2(320)
   ,rev_players_nk3  VARCHAR2(15)
   )
/
select 'SUGGESTION_VOBJ' as "Type:"
 from  user_errors
 where name  = 'SUGGESTION_VOBJ'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_VOBJ'
  and  type = 'TYPE'
 order by sequence
/

CREATE type suggestion_vtab
is
   -- Suggestion Active View (Virtual) Table Type
table of suggestion_vobj
/
select 'SUGGESTION_VTAB' as "Type:"
 from  user_errors
 where name  = 'SUGGESTION_VTAB'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_VTAB'
  and  type = 'TYPE'
 order by sequence
/

create package suggestion_dml
is

   -- Package Suggestion_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   -- Return the next Surrogate Key ID for actions
   --   This always references the base table
   function get_next_id
      return NUMBER;
   -- Return the current Surrogate Key ID for actions
   --   NOTE: This will return an ERROR if get_next_id has not been called
   --   This always references the base table
   function get_curr_id
      return NUMBER;

   -- The Natural Keys are inherited from the base table

   -- Return the Surrogate Key ID for the Natural Keys of actions
   --   NOTE: The fields used in this function are the Natural Keys for actions
   --         Alternatively, the Natural Key IDs for actions are:
   --            -) player_id
   --            -) seq
   function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ,seq  in  NUMBER
      ) return NUMBER;
   -- Return a concatenated string of Natural Keys for a actions id
   function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2;
   -- For all the Natural Key Column IDs, Return an ID
   function get_id2
      (player_id_in  in  NUMBER
      ,seq_in  in  NUMBER
      ) return NUMBER;

   -- Return an ID path string for a suggestion id
   function get_res_id_path
      (id_in  in  NUMBER
      ) return VARCHAR2;
   -- Return a Natural Key path string for a suggestion id
   function get_res_nk_path
      (id_in  in  NUMBER
      ) return CLOB;
   -- Return an ID for a suggestion ID path
   function get_res_id_by_id_path
      (id_path_in  VARCHAR2
      ) return NUMBER;
   -- Return an ID for a suggestion Natural Key path
   function get_res_id_by_nk_path
      (nk_path_in  VARCHAR2
      ) return NUMBER;

   -- Set a "view" record to null
   procedure clear
      (n_rec  in out nocopy  suggestion_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_rec  in out nocopy  suggestion_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record to null
   procedure clear
      (n_tab  in out nocopy  suggestion%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_tab  in out nocopy  suggestion%ROWTYPE
      ) return varchar2;

   -- Set a "view" record from a suggestion ID
   procedure get_rec_by_id
      (n_rec  in out nocopy  suggestion_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_rec  in out nocopy  suggestion_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record from a suggestion ID
   procedure get_rec_by_id
      (n_tab  in out nocopy  suggestion%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_tab  in out nocopy  suggestion%ROWTYPE
      ) return varchar2;

   -- NOTE: All INS procedures will run faster with a null ID
   --       because it avoids a history search for duplicate IDs
   --
   -- Insert a suggestion ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the function will run faster,
   --       but the returned record may contain invalid data
   procedure ins
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   procedure ins
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- Insert columns for actions ACTIVE View
   --   without returning updated data in each column
   procedure ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Insert columns for suggestion ACTIVE View
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      ) return varchar2;
   -- Insert columns for suggestion Table
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ) return varchar2;

   -- Update a suggestion ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the returned record
   --       may contain invalid data
   -- Used by the BU Trigger on the view, avoid if possible
   procedure upd
      (old_rec  in  suggestion_act%ROWTYPE
      ,new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (old_rec  in  suggestion_act%ROWTYPE
      ,new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- NOTE: Only FK NKs that are part of this NK will be used to find
   --       this ID from its NKs (FK IDs will be ignored)
   procedure upd
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- NOTE: suggestionID must be supplied (NK lookup will not be performed)
   procedure upd
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- Update columns for suggestion ACTIVE View
   --   without returning updated data in each column
   procedure upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Update columns for suggestion ACTIVE View
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      ) return varchar2;
   -- Update columns for suggestion Table
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ) return varchar2;

   -- Application Delete procedure without updated parameters
   --    The Natural Keys are inherited from the base table
   procedure del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      );
   -- This function traps and returns any error message from the del procedure
   function del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2;
   -- Application Delete procedure with updated parameters
   --    The Natural Keys are inherited from the base table
   procedure del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in NUMBER default null
      ,players_nk1_in  in VARCHAR2 default null
      ,players_nk2_in  in VARCHAR2 default null
      ,players_nk3_in  in VARCHAR2 default null
      ,seq_in  in NUMBER default null
      );
   -- This function traps and returns any error message from the del2 procedure
   function del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in NUMBER default null
      ,players_nk1_in  in VARCHAR2 default null
      ,players_nk2_in  in VARCHAR2 default null
      ,players_nk3_in  in VARCHAR2 default null
      ,seq_in  in NUMBER default null
      ) return varchar2;

   -- Special Data Warehouse Dimension Function
   --   Attempts to find matching record based on natural keys
   --   If found, performs updates on non-NK columns that changed
   --   If not found, inserts new record
   --   Returns ID of record
   procedure load_dim
      (dim_tab  in out nocopy  suggestion%ROWTYPE
      );
   -- This function traps and returns any error message from the load_dim procedure
   function load_dim
      (dim_tab  in out nocopy  suggestion%ROWTYPE
      ) return varchar2;

end suggestion_dml;
/
select 'SUGGESTION_DML' as "Package:"
 from  user_errors
 where name  = 'SUGGESTION_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body suggestion_dml
is

   -- Package Body Suggestion_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


--------------------------------------------
-- Return the next Surrogate Key ID for actions
function get_next_id
      return NUMBER
is
   retid  NUMBER;
begin
   select actions_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
--------------------------------------------
-- Return the current Surrogate Key ID for actions
function get_curr_id
      return NUMBER
is
   retid  NUMBER;
begin
   select actions_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
--------------------------------------------
-- Return the next Surrogate Key ID for the Natural Keys of actions
function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ,seq  in  NUMBER
      ) return NUMBER
is
begin
   return actions_tab.get_id
      (players_nk1
      ,players_nk2
      ,players_nk3
      ,seq
      );
end get_id;
----------------------------------------
-- For all the Natural Key Column IDs, Return an ID
function get_id2
      (player_id_in  in  NUMBER
      ,seq_in  in  NUMBER
      ) return NUMBER
is
   retid  NUMBER(38);
begin
   select id
    into  retid
    from  actions  ACT
    where player_id_in = ACT.player_id
     and  seq_in = ACT.seq
    ;
   return retid;
exception when no_data_found then return null;
end get_id2;
--------------------------------------------
-- Return a concatenated string of Natural Keys for a actions id
function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2
is
begin
   return actions_tab.get_nk(id_in);
end get_nk;
--------------------------------------------
-- Return an ID path string for a suggestion id
function get_res_id_path
      (id_in  in  NUMBER
      ) return VARCHAR2
is
begin
   return actions_tab.get_res_id_path(id_in);
end get_res_id_path;
--------------------------------------------
-- Return a Natural Key path string for a suggestion id
function get_res_nk_path
      (id_in  in  NUMBER
      ) return CLOB
is
begin
   return actions_tab.get_res_nk_path(id_in);
end get_res_nk_path;
--------------------------------------------
-- Return an ID for a suggestion ID path
function get_res_id_by_id_path
      (id_path_in  VARCHAR2
      ) return NUMBER
is
begin
   return actions_tab.get_res_id_by_id_path(id_path_in);
end get_res_id_by_id_path;
--------------------------------------------
-- Return an ID for a suggestion Natural Key path
function get_res_id_by_nk_path
      (nk_path_in  VARCHAR2
      ) return NUMBER
is
begin
   return actions_dml.get_res_id_by_nk_path(nk_path_in);
end get_res_id_by_nk_path;

--------------------------------------------
-- Set a "view" record to null
procedure clear
      (n_rec  in out nocopy  suggestion_ACT%ROWTYPE
      )
is
begin
   n_rec.id := null;
   n_rec.player_id := null;
   n_rec.players_nk1 := null;
   n_rec.players_nk2 := null;
   n_rec.players_nk3 := null;
   n_rec.seq := null;
   n_rec.resolved := null;
   n_rec.res_action_id := null;
   n_rec.res_id_path := null;
   n_rec.res_nk_path := null;
   n_rec.res_actions_nk1 := null;
   n_rec.res_actions_nk2 := null;
   n_rec.res_actions_nk3 := null;
   n_rec.res_actions_nk4 := null;
   n_rec.rev_player_id := null;
   n_rec.rev_players_nk1 := null;
   n_rec.rev_players_nk2 := null;
   n_rec.rev_players_nk3 := null;
end clear;
----------
function clear
      (n_rec  in out nocopy  suggestion_ACT%ROWTYPE
      ) return varchar2
is
begin
   clear(n_rec);
   return '';
exception when others then return sqlerrm;
end clear;
--------------------------------------------
-- Set a "table" record to null
procedure clear
      (n_tab  in out nocopy  suggestion%ROWTYPE
      )
is
begin
   n_tab.id := null;
   n_tab.player_id := null;
   n_tab.seq := null;
   n_tab.resolved := null;
   n_tab.res_action_id := null;
   n_tab.rev_player_id := null;
end clear;
----------
function clear
      (n_tab  in out nocopy  suggestion%ROWTYPE
      ) return varchar2
is
begin
   clear(n_tab);
   return '';
exception when others then return sqlerrm;
end clear;
----------------------------------------
procedure get_rec_by_id
      (n_rec  in out nocopy  suggestion_act%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_rec.id is null then
      clear(n_rec);
   else
      select * into n_rec from suggestion_act
       where id = n_rec.id;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.get_rec_by_id(act rec) ID:' || n_rec.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_rec  in out nocopy  suggestion_act%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_rec);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
----------------------------------------
procedure get_rec_by_id
      (n_tab  in out nocopy  suggestion%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_tab.id is null then
      clear(n_tab);
   else
      select * into n_tab from suggestion
       where id = n_tab.id;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.get_rec_by_id(tab rec) ID:' || n_tab.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_tab  in out nocopy  suggestion%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_tab);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
--------------------------------------------
-- Insert a suggestion ACTIVE View Record
procedure ins
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_act.id := new_rec.id;
   new_act.player_id := new_rec.player_id;
   new_act.players_nk1 := new_rec.players_nk1;
   new_act.players_nk2 := new_rec.players_nk2;
   new_act.players_nk3 := new_rec.players_nk3;
   new_act.seq := new_rec.seq;
   new_act.resolved := new_rec.resolved;
   new_act.res_action_id := new_rec.res_action_id;
   new_act.res_id_path := new_rec.res_id_path;
   new_act.res_nk_path := new_rec.res_nk_path;
   new_act.res_actions_nk1 := new_rec.res_actions_nk1;
   new_act.res_actions_nk2 := new_rec.res_actions_nk2;
   new_act.res_actions_nk3 := new_rec.res_actions_nk3;
   new_act.res_actions_nk4 := new_rec.res_actions_nk4;
   new_act.rev_player_id := new_rec.rev_player_id;
   new_act.rev_players_nk1 := new_rec.rev_players_nk1;
   new_act.rev_players_nk2 := new_rec.rev_players_nk2;
   new_act.rev_players_nk3 := new_rec.rev_players_nk3;
   new_act.actions_sub_type := 'suggestion';
   actions_dml.ins(new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
      new_rec.res_action_id := new_act.res_action_id;
      new_rec.res_id_path := new_act.res_id_path;
      new_rec.res_nk_path := new_act.res_nk_path;
      new_rec.res_actions_nk1 := new_act.res_actions_nk1;
      new_rec.res_actions_nk2 := new_act.res_actions_nk2;
      new_rec.res_actions_nk3 := new_act.res_actions_nk3;
      new_rec.res_actions_nk4 := new_act.res_actions_nk4;
      new_rec.rev_player_id := new_act.rev_player_id;
      new_rec.rev_players_nk1 := new_act.rev_players_nk1;
      new_rec.rev_players_nk2 := new_act.rev_players_nk2;
      new_rec.rev_players_nk3 := new_act.rev_players_nk3;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.ins(act rec) ID:' || new_rec.id, start_tstamp);
end ins;
----------
function ins
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert a suggestion Table Record
procedure ins
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_base  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_base.id := new_tab.id;
   new_base.player_id := new_tab.player_id;
   new_base.seq := new_tab.seq;
   new_base.resolved := new_tab.resolved;
   new_base.res_action_id := new_tab.res_action_id;
   new_base.rev_player_id := new_tab.rev_player_id;
   new_base.actions_sub_type := 'suggestion';
   actions_tab.ins(new_base);
   if upd_vals_in then
      new_tab.id := new_base.id;
      new_tab.player_id := new_base.player_id;
      new_tab.seq := new_base.seq;
      new_tab.resolved := new_base.resolved;
      new_tab.res_action_id := new_base.res_action_id;
      new_tab.rev_player_id := new_base.rev_player_id;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.ins(tab rec) ID:' || new_tab.id, start_tstamp);
end ins;
----------
function ins
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_tab, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert columns for actions ACTIVE View
procedure ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.player_id := player_id_in;
   new_rec.players_nk1 := players_nk1_in;
   new_rec.players_nk2 := players_nk2_in;
   new_rec.players_nk3 := players_nk3_in;
   new_rec.seq := seq_in;
   new_rec.resolved := resolved_in;
   new_rec.res_action_id := res_action_id_in;
   new_rec.res_id_path := res_id_path_in;
   new_rec.res_nk_path := res_nk_path_in;
   new_rec.res_actions_nk1 := res_actions_nk1_in;
   new_rec.res_actions_nk2 := res_actions_nk2_in;
   new_rec.res_actions_nk3 := res_actions_nk3_in;
   new_rec.res_actions_nk4 := res_actions_nk4_in;
   new_rec.rev_player_id := rev_player_id_in;
   new_rec.rev_players_nk1 := rev_players_nk1_in;
   new_rec.rev_players_nk2 := rev_players_nk2_in;
   new_rec.rev_players_nk3 := rev_players_nk3_in;
   new_rec.actions_sub_type := 'suggestion';
   actions_dml.ins(new_rec, FALSE);
   return;
   util.trc_time_interval('suggestion_dml.ins(act_col) ID:' || id_in, start_tstamp);
end ins;
----------
function ins
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
    ins
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      ,resolved_in
      ,res_action_id_in
      ,res_id_path_in
      ,res_nk_path_in
      ,res_actions_nk1_in
      ,res_actions_nk2_in
      ,res_actions_nk3_in
      ,res_actions_nk4_in
      ,rev_player_id_in
      ,rev_players_nk1_in
      ,rev_players_nk2_in
      ,rev_players_nk3_in
      );
   return '';
exception when others then return sqlerrm;
end ins;
--------------------------------------------
-- Insert columns for suggestion ACTIVE View
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.players_nk1 := players_nk1_io;
   new_rec.players_nk2 := players_nk2_io;
   new_rec.players_nk3 := players_nk3_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.res_action_id := res_action_id_io;
   new_rec.res_id_path := res_id_path_io;
   new_rec.res_nk_path := res_nk_path_io;
   new_rec.res_actions_nk1 := res_actions_nk1_io;
   new_rec.res_actions_nk2 := res_actions_nk2_io;
   new_rec.res_actions_nk3 := res_actions_nk3_io;
   new_rec.res_actions_nk4 := res_actions_nk4_io;
   new_rec.rev_player_id := rev_player_id_io;
   new_rec.rev_players_nk1 := rev_players_nk1_io;
   new_rec.rev_players_nk2 := rev_players_nk2_io;
   new_rec.rev_players_nk3 := rev_players_nk3_io;
   new_rec.actions_sub_type := 'suggestion';
   --
   actions_dml.ins(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   players_nk1_io := new_rec.players_nk1;
   players_nk2_io := new_rec.players_nk2;
   players_nk3_io := new_rec.players_nk3;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   res_action_id_io := new_rec.res_action_id;
   res_id_path_io := new_rec.res_id_path;
   res_nk_path_io := new_rec.res_nk_path;
   res_actions_nk1_io := new_rec.res_actions_nk1;
   res_actions_nk2_io := new_rec.res_actions_nk2;
   res_actions_nk3_io := new_rec.res_actions_nk3;
   res_actions_nk4_io := new_rec.res_actions_nk4;
   rev_player_id_io := new_rec.rev_player_id;
   rev_players_nk1_io := new_rec.rev_players_nk1;
   rev_players_nk2_io := new_rec.rev_players_nk2;
   rev_players_nk3_io := new_rec.rev_players_nk3;
   return;
   util.trc_time_interval('suggestion_dml.ins2(act col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,player_id_io
      ,players_nk1_io
      ,players_nk2_io
      ,players_nk3_io
      ,seq_io
      ,resolved_io
      ,res_action_id_io
      ,res_id_path_io
      ,res_nk_path_io
      ,res_actions_nk1_io
      ,res_actions_nk2_io
      ,res_actions_nk3_io
      ,res_actions_nk4_io
      ,rev_player_id_io
      ,rev_players_nk1_io
      ,rev_players_nk2_io
      ,rev_players_nk3_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
--------------------------------------------
-- Insert columns for suggestion Table
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.res_action_id := res_action_id_io;
   new_rec.rev_player_id := rev_player_id_io;
   new_rec.actions_sub_type := 'suggestion';
   --
   actions_tab.ins(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   res_action_id_io := new_rec.res_action_id;
   rev_player_id_io := new_rec.rev_player_id;
   return;
   util.trc_time_interval('suggestion_dml.ins2(tab col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ) return varchar2
is
begin
   ins2
      (id_io
      ,player_id_io
      ,seq_io
      ,resolved_io
      ,res_action_id_io
      ,rev_player_id_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
--------------------------------------------
-- Used by the BU Trigger on the view, avoid if possible
procedure upd
      (old_rec  in  suggestion_act%ROWTYPE
      ,new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   old_act  actions_act%ROWTYPE;
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_act.id := old_rec.id;
   new_act.id := new_rec.id;
   old_act.player_id := old_rec.player_id;
   new_act.player_id := new_rec.player_id;
   old_act.players_nk1 := old_rec.players_nk1;
   new_act.players_nk1 := new_rec.players_nk1;
   old_act.players_nk2 := old_rec.players_nk2;
   new_act.players_nk2 := new_rec.players_nk2;
   old_act.players_nk3 := old_rec.players_nk3;
   new_act.players_nk3 := new_rec.players_nk3;
   old_act.seq := old_rec.seq;
   new_act.seq := new_rec.seq;
   old_act.resolved := old_rec.resolved;
   new_act.resolved := new_rec.resolved;
   old_act.res_action_id := old_rec.res_action_id;
   new_act.res_action_id := new_rec.res_action_id;
   old_act.res_id_path := old_rec.res_id_path;
   new_act.res_id_path := new_rec.res_id_path;
   old_act.res_nk_path := old_rec.res_nk_path;
   new_act.res_nk_path := new_rec.res_nk_path;
   old_act.res_actions_nk1 := old_rec.res_actions_nk1;
   new_act.res_actions_nk1 := new_rec.res_actions_nk1;
   old_act.res_actions_nk2 := old_rec.res_actions_nk2;
   new_act.res_actions_nk2 := new_rec.res_actions_nk2;
   old_act.res_actions_nk3 := old_rec.res_actions_nk3;
   new_act.res_actions_nk3 := new_rec.res_actions_nk3;
   old_act.res_actions_nk4 := old_rec.res_actions_nk4;
   new_act.res_actions_nk4 := new_rec.res_actions_nk4;
   old_act.rev_player_id := old_rec.rev_player_id;
   new_act.rev_player_id := new_rec.rev_player_id;
   old_act.rev_players_nk1 := old_rec.rev_players_nk1;
   new_act.rev_players_nk1 := new_rec.rev_players_nk1;
   old_act.rev_players_nk2 := old_rec.rev_players_nk2;
   new_act.rev_players_nk2 := new_rec.rev_players_nk2;
   old_act.rev_players_nk3 := old_rec.rev_players_nk3;
   new_act.rev_players_nk3 := new_rec.rev_players_nk3;
   -- Run the update
   old_act.actions_sub_type := 'suggestion';
   new_act.actions_sub_type := 'suggestion';
   actions_dml.upd(old_act, new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
      new_rec.res_action_id := new_act.res_action_id;
      new_rec.res_id_path := new_act.res_id_path;
      new_rec.res_nk_path := new_act.res_nk_path;
      new_rec.res_actions_nk1 := new_act.res_actions_nk1;
      new_rec.res_actions_nk2 := new_act.res_actions_nk2;
      new_rec.res_actions_nk3 := new_act.res_actions_nk3;
      new_rec.res_actions_nk4 := new_act.res_actions_nk4;
      new_rec.rev_player_id := new_act.rev_player_id;
      new_rec.rev_players_nk1 := new_act.rev_players_nk1;
      new_rec.rev_players_nk2 := new_act.rev_players_nk2;
      new_rec.rev_players_nk3 := new_act.rev_players_nk3;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.upd(trigger) ID:' || old_rec.id, start_tstamp);
end upd;
----------
function upd
      (old_rec  in  suggestion_act%ROWTYPE
      ,new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(old_rec, new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update a suggestion ACTIVE View Record
procedure upd
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_act  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
      new_act.id := new_rec.id;
      new_act.player_id := new_rec.player_id;
      new_act.players_nk1 := new_rec.players_nk1;
      new_act.players_nk2 := new_rec.players_nk2;
      new_act.players_nk3 := new_rec.players_nk3;
      new_act.seq := new_rec.seq;
      new_act.resolved := new_rec.resolved;
      new_act.res_action_id := new_rec.res_action_id;
      new_act.res_id_path := new_rec.res_id_path;
      new_act.res_nk_path := new_rec.res_nk_path;
      new_act.res_actions_nk1 := new_rec.res_actions_nk1;
      new_act.res_actions_nk2 := new_rec.res_actions_nk2;
      new_act.res_actions_nk3 := new_rec.res_actions_nk3;
      new_act.res_actions_nk4 := new_rec.res_actions_nk4;
      new_act.rev_player_id := new_rec.rev_player_id;
      new_act.rev_players_nk1 := new_rec.rev_players_nk1;
      new_act.rev_players_nk2 := new_rec.rev_players_nk2;
      new_act.rev_players_nk3 := new_rec.rev_players_nk3;
   new_act.actions_sub_type := 'suggestion';
   actions_dml.upd(new_act, upd_vals_in);
   if upd_vals_in then
      new_rec.id := new_act.id;
      new_rec.player_id := new_act.player_id;
      new_rec.players_nk1 := new_act.players_nk1;
      new_rec.players_nk2 := new_act.players_nk2;
      new_rec.players_nk3 := new_act.players_nk3;
      new_rec.seq := new_act.seq;
      new_rec.resolved := new_act.resolved;
      new_rec.res_action_id := new_act.res_action_id;
      new_rec.res_id_path := new_act.res_id_path;
      new_rec.res_nk_path := new_act.res_nk_path;
      new_rec.res_actions_nk1 := new_act.res_actions_nk1;
      new_rec.res_actions_nk2 := new_act.res_actions_nk2;
      new_rec.res_actions_nk3 := new_act.res_actions_nk3;
      new_rec.res_actions_nk4 := new_act.res_actions_nk4;
      new_rec.rev_player_id := new_act.rev_player_id;
      new_rec.rev_players_nk1 := new_act.rev_players_nk1;
      new_rec.rev_players_nk2 := new_act.rev_players_nk2;
      new_rec.rev_players_nk3 := new_act.rev_players_nk3;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.upd(act rec) ID:' || new_rec.id, start_tstamp);
end upd;
----------
function upd
      (new_rec  in out nocopy  suggestion_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   upd(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update a suggestion Table Record
procedure upd
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   new_base  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_base.id := new_tab.id;
   new_base.player_id := new_tab.player_id;
   new_base.seq := new_tab.seq;
   new_base.resolved := new_tab.resolved;
   new_base.res_action_id := new_tab.res_action_id;
   new_base.rev_player_id := new_tab.rev_player_id;
   new_base.actions_sub_type := 'suggestion';
   actions_dml.upd(new_base);
   if upd_vals_in then
      new_tab.id := new_base.id;
      new_tab.player_id := new_base.player_id;
      new_tab.seq := new_base.seq;
      new_tab.resolved := new_base.resolved;
      new_tab.res_action_id := new_base.res_action_id;
      new_tab.rev_player_id := new_base.rev_player_id;
   end if;
   return;
   util.trc_time_interval('suggestion_dml.upd(tab rec) ID:' || new_tab.id, start_tstamp);
end upd;
----------
function upd
      (new_tab  in out nocopy  suggestion%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(new_tab, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update columns for suggestion ACTIVE View
procedure upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.player_id := player_id_in;
   new_rec.players_nk1 := players_nk1_in;
   new_rec.players_nk2 := players_nk2_in;
   new_rec.players_nk3 := players_nk3_in;
   new_rec.seq := seq_in;
   new_rec.resolved := resolved_in;
   new_rec.res_action_id := res_action_id_in;
   new_rec.res_id_path := res_id_path_in;
   new_rec.res_nk_path := res_nk_path_in;
   new_rec.res_actions_nk1 := res_actions_nk1_in;
   new_rec.res_actions_nk2 := res_actions_nk2_in;
   new_rec.res_actions_nk3 := res_actions_nk3_in;
   new_rec.res_actions_nk4 := res_actions_nk4_in;
   new_rec.rev_player_id := rev_player_id_in;
   new_rec.rev_players_nk1 := rev_players_nk1_in;
   new_rec.rev_players_nk2 := rev_players_nk2_in;
   new_rec.rev_players_nk3 := rev_players_nk3_in;
   new_rec.actions_sub_type := 'suggestion';
   actions_dml.upd(new_rec, FALSE);
   return;
   util.trc_time_interval('suggestion_dml.upd(act col) ID:' || id_in, start_tstamp);
end upd;
----------
function upd
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ,resolved_in  in  VARCHAR2 default null
      ,res_action_id_in  in  NUMBER default null
      ,res_id_path_in  in  VARCHAR2 default null
      ,res_nk_path_in  in  VARCHAR2 default null
      ,res_actions_nk1_in  in  VARCHAR2 default null
      ,res_actions_nk2_in  in  VARCHAR2 default null
      ,res_actions_nk3_in  in  VARCHAR2 default null
      ,res_actions_nk4_in  in  NUMBER default null
      ,rev_player_id_in  in  NUMBER default null
      ,rev_players_nk1_in  in  VARCHAR2 default null
      ,rev_players_nk2_in  in  VARCHAR2 default null
      ,rev_players_nk3_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   upd
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      ,resolved_in
      ,res_action_id_in
      ,res_id_path_in
      ,res_nk_path_in
      ,res_actions_nk1_in
      ,res_actions_nk2_in
      ,res_actions_nk3_in
      ,res_actions_nk4_in
      ,rev_player_id_in
      ,rev_players_nk1_in
      ,rev_players_nk2_in
      ,rev_players_nk3_in
      );
   return '';
exception when others then return sqlerrm;
end upd;
--------------------------------------------
-- Update columns for suggestion ACTIVE View
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      )
is
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.players_nk1 := players_nk1_io;
   new_rec.players_nk2 := players_nk2_io;
   new_rec.players_nk3 := players_nk3_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.res_action_id := res_action_id_io;
   new_rec.res_id_path := res_id_path_io;
   new_rec.res_nk_path := res_nk_path_io;
   new_rec.res_actions_nk1 := res_actions_nk1_io;
   new_rec.res_actions_nk2 := res_actions_nk2_io;
   new_rec.res_actions_nk3 := res_actions_nk3_io;
   new_rec.res_actions_nk4 := res_actions_nk4_io;
   new_rec.rev_player_id := rev_player_id_io;
   new_rec.rev_players_nk1 := rev_players_nk1_io;
   new_rec.rev_players_nk2 := rev_players_nk2_io;
   new_rec.rev_players_nk3 := rev_players_nk3_io;
   new_rec.actions_sub_type := 'suggestion';
   --
   actions_dml.upd(new_rec, TRUE);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   players_nk1_io := new_rec.players_nk1;
   players_nk2_io := new_rec.players_nk2;
   players_nk3_io := new_rec.players_nk3;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   res_action_id_io := new_rec.res_action_id;
   res_id_path_io := new_rec.res_id_path;
   res_nk_path_io := new_rec.res_nk_path;
   res_actions_nk1_io := new_rec.res_actions_nk1;
   res_actions_nk2_io := new_rec.res_actions_nk2;
   res_actions_nk3_io := new_rec.res_actions_nk3;
   res_actions_nk4_io := new_rec.res_actions_nk4;
   rev_player_id_io := new_rec.rev_player_id;
   rev_players_nk1_io := new_rec.rev_players_nk1;
   rev_players_nk2_io := new_rec.rev_players_nk2;
   rev_players_nk3_io := new_rec.rev_players_nk3;
   return;
   util.trc_time_interval('suggestion_dmlupd2(act col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,players_nk1_io  in out nocopy  VARCHAR2
      ,players_nk2_io  in out nocopy  VARCHAR2
      ,players_nk3_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,res_id_path_io  in out nocopy  VARCHAR2
      ,res_nk_path_io  in out nocopy  VARCHAR2
      ,res_actions_nk1_io  in out nocopy  VARCHAR2
      ,res_actions_nk2_io  in out nocopy  VARCHAR2
      ,res_actions_nk3_io  in out nocopy  VARCHAR2
      ,res_actions_nk4_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ,rev_players_nk1_io  in out nocopy  VARCHAR2
      ,rev_players_nk2_io  in out nocopy  VARCHAR2
      ,rev_players_nk3_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   upd2
      (id_io
      ,player_id_io
      ,players_nk1_io
      ,players_nk2_io
      ,players_nk3_io
      ,seq_io
      ,resolved_io
      ,res_action_id_io
      ,res_id_path_io
      ,res_nk_path_io
      ,res_actions_nk1_io
      ,res_actions_nk2_io
      ,res_actions_nk3_io
      ,res_actions_nk4_io
      ,rev_player_id_io
      ,rev_players_nk1_io
      ,rev_players_nk2_io
      ,rev_players_nk3_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
--------------------------------------------
-- Update columns for suggestion Table
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.player_id := player_id_io;
   new_rec.seq := seq_io;
   new_rec.resolved := resolved_io;
   new_rec.res_action_id := res_action_id_io;
   new_rec.rev_player_id := rev_player_id_io;
   new_rec.actions_sub_type := 'suggestion';
   --
   actions_dml.upd(new_rec);
   --
   id_io := new_rec.id;
   player_id_io := new_rec.player_id;
   seq_io := new_rec.seq;
   resolved_io := new_rec.resolved;
   res_action_id_io := new_rec.res_action_id;
   rev_player_id_io := new_rec.rev_player_id;
   return;
   util.trc_time_interval('suggestion_dmlupd2(tab col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,player_id_io  in out nocopy  NUMBER
      ,seq_io  in out nocopy  NUMBER
      ,resolved_io  in out nocopy  VARCHAR2
      ,res_action_id_io  in out nocopy  NUMBER
      ,rev_player_id_io  in out nocopy  NUMBER
      ) return varchar2
is
begin
   upd2
      (id_io
      ,player_id_io
      ,seq_io
      ,resolved_io
      ,res_action_id_io
      ,rev_player_id_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
----------------------------------------
-- Application Delete procedure without updated parameters
procedure del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   actions_dml.del
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return;
   util.trc_time_interval('suggestion_dml.del ID:' || id_in, start_tstamp);
end del;
----------
function del
      (id_in  in  NUMBER default null
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2
is
begin
   del
      (id_in
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return '';
exception when others then return sqlerrm;
end del;
----------------------------------------
-- Application Delete procedure with updated parameters
procedure del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   actions_dml.del2
      (id_io
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return;
   util.trc_time_interval('suggestion_dml.del2 ID:' || id_io, start_tstamp);
end del2;
----------
function del2
      (id_io  in out nocopy  NUMBER
      ,player_id_in  in  NUMBER default null
      ,players_nk1_in  in  VARCHAR2 default null
      ,players_nk2_in  in  VARCHAR2 default null
      ,players_nk3_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER default null
      ) return varchar2
is
begin
   del2
      (id_io
      ,player_id_in
      ,players_nk1_in
      ,players_nk2_in
      ,players_nk3_in
      ,seq_in
      );
   return '';
exception when others then return sqlerrm;
end del2;
--------------------------------------------
-- Special Data Warehouse Dimension Function
procedure load_dim
      (dim_tab  in out nocopy  suggestion%ROWTYPE
      )
is
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := dim_tab.id;
   new_rec.player_id := dim_tab.player_id;
   new_rec.seq := dim_tab.seq;
   new_rec.resolved := dim_tab.resolved;
   new_rec.res_action_id := dim_tab.res_action_id;
   new_rec.rev_player_id := dim_tab.rev_player_id;
   new_rec.actions_sub_type := 'suggestion';
   --
   actions_dml.load_dim(new_rec);
   return;
   util.trc_time_interval('suggestion_dmlload_dim ID:' || dim_tab.id, start_tstamp);
end load_dim;
----------
function load_dim
      (dim_tab  in out nocopy  suggestion%ROWTYPE
      ) return varchar2
is
begin
   load_dim(dim_tab);
   return '';
exception when others then return sqlerrm;
end load_dim;
--------------------------------------------

end suggestion_dml;
/
select 'SUGGESTION_DML' as "Package Body:"
 from  user_errors
 where name  = 'SUGGESTION_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create TRIGGER suggestion_ioi
   instead of insert on suggestion
   for each row
declare

   -- Trigger Suggestion_Ioi

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := :new.id;
   new_rec.player_id := :new.player_id;
   new_rec.seq := :new.seq;
   new_rec.resolved := :new.resolved;
   new_rec.res_action_id := :new.res_action_id;
   new_rec.rev_player_id := :new.rev_player_id;
   new_rec.actions_sub_type := 'suggestion';
   actions_tab.ins(new_rec);
   util.trc_time_interval('suggestion_ioi trigger ID:' || :new.id, start_tstamp);
end suggestion_ioi;
/
select 'SUGGESTION_IOI' as "Trigger:"
 from  user_errors
 where name  = 'SUGGESTION_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER suggestion_iou
   instead of update on suggestion
   for each row
declare

   -- Trigger Suggestion_Iou

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   old_rec  actions%ROWTYPE;
   new_rec  actions%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_rec.id := :old.id;
   new_rec.id := :new.id;
   old_rec.player_id := :old.player_id;
   new_rec.player_id := :new.player_id;
   old_rec.seq := :old.seq;
   new_rec.seq := :new.seq;
   old_rec.resolved := :old.resolved;
   new_rec.resolved := :new.resolved;
   old_rec.res_action_id := :old.res_action_id;
   new_rec.res_action_id := :new.res_action_id;
   old_rec.rev_player_id := :old.rev_player_id;
   new_rec.rev_player_id := :new.rev_player_id;
   old_rec.actions_sub_type := 'suggestion';
   new_rec.actions_sub_type := 'suggestion';
   actions_tab.upd(old_rec, new_rec);
   util.trc_time_interval('suggestion_iou trigger ID:' || :old.id, start_tstamp);
end suggestion_iou;
/
select 'SUGGESTION_IOU' as "Trigger:"
 from  user_errors
 where name  = 'SUGGESTION_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER suggestion_iod
   instead of delete on suggestion
   for each row
declare

   -- Trigger Suggestion_Iod

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   start_tstamp  timestamp := systimestamp;
begin
   actions_tab.del(:old.id);
   util.trc_time_interval('suggestion_iod trigger ID:' || :old.id, start_tstamp);
end suggestion_iod;
/
select 'SUGGESTION_IOD' as "Trigger:"
 from  user_errors
 where name  = 'SUGGESTION_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER suggestion_act_ioi
   instead of insert on suggestion_act
   for each row
declare

   -- Trigger Suggestion_Act_Ioi

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := :new.id;
   new_rec.player_id := :new.player_id;
   new_rec.players_nk1 := :new.players_nk1;
   new_rec.players_nk2 := :new.players_nk2;
   new_rec.players_nk3 := :new.players_nk3;
   new_rec.seq := :new.seq;
   new_rec.resolved := :new.resolved;
   new_rec.res_action_id := :new.res_action_id;
   new_rec.res_id_path := :new.res_id_path;
   new_rec.res_nk_path := :new.res_nk_path;
   new_rec.res_actions_nk1 := :new.res_actions_nk1;
   new_rec.res_actions_nk2 := :new.res_actions_nk2;
   new_rec.res_actions_nk3 := :new.res_actions_nk3;
   new_rec.res_actions_nk4 := :new.res_actions_nk4;
   new_rec.rev_player_id := :new.rev_player_id;
   new_rec.rev_players_nk1 := :new.rev_players_nk1;
   new_rec.rev_players_nk2 := :new.rev_players_nk2;
   new_rec.rev_players_nk3 := :new.rev_players_nk3;
   new_rec.actions_sub_type := 'suggestion';
   actions_dml.ins(new_rec, FALSE);
   util.trc_time_interval('suggestion_act_ioi trigger ID:' || :new.id, start_tstamp);
end suggestion_act_ioi;
/
select 'SUGGESTION_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'SUGGESTION_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER suggestion_act_iou
   instead of update on suggestion_act
   for each row
declare

   -- Trigger Suggestion_Act_Iou

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   old_rec  actions_act%ROWTYPE;
   new_rec  actions_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   old_rec.id := :old.id;
   new_rec.id := :new.id;
   old_rec.player_id := :old.player_id;
   new_rec.player_id := :new.player_id;
   old_rec.players_nk1 := :old.players_nk1;
   new_rec.players_nk1 := :new.players_nk1;
   old_rec.players_nk2 := :old.players_nk2;
   new_rec.players_nk2 := :new.players_nk2;
   old_rec.players_nk3 := :old.players_nk3;
   new_rec.players_nk3 := :new.players_nk3;
   old_rec.seq := :old.seq;
   new_rec.seq := :new.seq;
   old_rec.resolved := :old.resolved;
   new_rec.resolved := :new.resolved;
   old_rec.res_action_id := :old.res_action_id;
   new_rec.res_action_id := :new.res_action_id;
   old_rec.res_id_path := :old.res_id_path;
   new_rec.res_id_path := :new.res_id_path;
   old_rec.res_nk_path := :old.res_nk_path;
   new_rec.res_nk_path := :new.res_nk_path;
   old_rec.res_actions_nk1 := :old.res_actions_nk1;
   new_rec.res_actions_nk1 := :new.res_actions_nk1;
   old_rec.res_actions_nk2 := :old.res_actions_nk2;
   new_rec.res_actions_nk2 := :new.res_actions_nk2;
   old_rec.res_actions_nk3 := :old.res_actions_nk3;
   new_rec.res_actions_nk3 := :new.res_actions_nk3;
   old_rec.res_actions_nk4 := :old.res_actions_nk4;
   new_rec.res_actions_nk4 := :new.res_actions_nk4;
   old_rec.rev_player_id := :old.rev_player_id;
   new_rec.rev_player_id := :new.rev_player_id;
   old_rec.rev_players_nk1 := :old.rev_players_nk1;
   new_rec.rev_players_nk1 := :new.rev_players_nk1;
   old_rec.rev_players_nk2 := :old.rev_players_nk2;
   new_rec.rev_players_nk2 := :new.rev_players_nk2;
   old_rec.rev_players_nk3 := :old.rev_players_nk3;
   new_rec.rev_players_nk3 := :new.rev_players_nk3;
   old_rec.actions_sub_type := 'suggestion';
   new_rec.actions_sub_type := 'suggestion';
   actions_dml.upd(old_rec, new_rec);
   util.trc_time_interval('suggestion_act_iou trigger ID:' || :old.id, start_tstamp);
end suggestion_act_iou;
/
select 'SUGGESTION_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'SUGGESTION_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER suggestion_act_iod
   instead of delete on suggestion_act
   for each row
declare

   -- Trigger Suggestion_Act_Iod

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:34 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   start_tstamp  timestamp := systimestamp;
begin
   actions_tab.del(:old.id);
   util.trc_time_interval('suggestion_act_iod trigger ID:' || :old.id, start_tstamp);
end suggestion_act_iod;
/
select 'SUGGESTION_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'SUGGESTION_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'SUGGESTION_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

