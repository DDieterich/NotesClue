
--
--  Create CLUE.GAMES_TAB Package Body
--

set define off


--DBMS_METADATA:CLUE.GAMES_TAB

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CLUE"."GAMES_TAB" 
is

-- Package Body Games_Tab
--    Table functions and integrity checks)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:29 AM

   --
   --
   -- ? Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


----------------------------------------
procedure check_rec
      (id  in  NUMBER
      ,user_id  in out nocopy  NUMBER
      ,name  in out nocopy  VARCHAR2
      ,last_act_num  in out nocopy  NUMBER
      ,completed  in out nocopy  VARCHAR2
      ,hide_undo  in out nocopy  VARCHAR2
      ,hide_accuse  in out nocopy  VARCHAR2
      ,hide_missing  in out nocopy  VARCHAR2
      ,hide_my_sugg  in out nocopy  VARCHAR2
      ,hide_pcards  in out nocopy  VARCHAR2
      ,hide_sugg_hist  in out nocopy  VARCHAR2
      )
is
begin
   -- 1) Set Default Values as Needed
   if util.get_use_defaults then
      if last_act_num is null
      then
         last_act_num := 3;
      end if;
   end if;
   -- 2) Check for NOT NULL
   if user_id is null then
      raise_application_error(-20004, 'games_tab.check_rec(): user_id cannot be null.');
   end if;
   if name is null then
      raise_application_error(-20004, 'games_tab.check_rec(): name cannot be null.');
   end if;
   if last_act_num is null then
      raise_application_error(-20004, 'games_tab.check_rec(): last_act_num cannot be null.');
   end if;
   -- 3) Sub-type NULL checks
   -- 4) Compress Spaces, as needed
   -- 5) Custom Data Handling
   -- 6) Fold the case, as needed
   if util.get_fold_strings then
      name := initcap(name);
      completed := upper(completed);
      hide_undo := upper(hide_undo);
      hide_accuse := upper(hide_accuse);
      hide_missing := upper(hide_missing);
      hide_my_sugg := upper(hide_my_sugg);
      hide_pcards := upper(hide_pcards);
      hide_sugg_hist := upper(hide_sugg_hist);
   else
      if name is not null
      then
         if name != initcap(name) then
            raise_application_error(-20003, 'games_tab.check_rec(): name must be initial case.');
         end if;
      end if;
      if completed is not null
      then
         if completed != upper(completed) then
            raise_application_error(-20003, 'games_tab.check_rec(): completed must be upper case.');
         end if;
      end if;
      if hide_undo is not null
      then
         if hide_undo != upper(hide_undo) then
            raise_application_error(-20003, 'games_tab.check_rec(): hide_undo must be upper case.');
         end if;
      end if;
      if hide_accuse is not null
      then
         if hide_accuse != upper(hide_accuse) then
            raise_application_error(-20003, 'games_tab.check_rec(): hide_accuse must be upper case.');
         end if;
      end if;
      if hide_missing is not null
      then
         if hide_missing != upper(hide_missing) then
            raise_application_error(-20003, 'games_tab.check_rec(): hide_missing must be upper case.');
         end if;
      end if;
      if hide_my_sugg is not null
      then
         if hide_my_sugg != upper(hide_my_sugg) then
            raise_application_error(-20003, 'games_tab.check_rec(): hide_my_sugg must be upper case.');
         end if;
      end if;
      if hide_pcards is not null
      then
         if hide_pcards != upper(hide_pcards) then
            raise_application_error(-20003, 'games_tab.check_rec(): hide_pcards must be upper case.');
         end if;
      end if;
      if hide_sugg_hist is not null
      then
         if hide_sugg_hist != upper(hide_sugg_hist) then
            raise_application_error(-20003, 'games_tab.check_rec(): hide_sugg_hist must be upper case.');
         end if;
      end if;
   end if;
   -- 7) Check for Domain Values
   if completed is not null
      and not Flagged_dom.includes(completed)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): completed must be one of ("X").');
   end if;
   if hide_undo is not null
      and not Flagged_dom.includes(hide_undo)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): hide_undo must be one of ("X").');
   end if;
   if hide_accuse is not null
      and not Flagged_dom.includes(hide_accuse)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): hide_accuse must be one of ("X").');
   end if;
   if hide_missing is not null
      and not Flagged_dom.includes(hide_missing)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): hide_missing must be one of ("X").');
   end if;
   if hide_my_sugg is not null
      and not Flagged_dom.includes(hide_my_sugg)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): hide_my_sugg must be one of ("X").');
   end if;
   if hide_pcards is not null
      and not Flagged_dom.includes(hide_pcards)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): hide_pcards must be one of ("X").');
   end if;
   if hide_sugg_hist is not null
      and not Flagged_dom.includes(hide_sugg_hist)
   then
      raise_application_error(-20005, 'games_tab.check_rec(): hide_sugg_hist must be one of ("X").');
   end if;
   -- 8) Custom Constraint Checks
   -- These constraints must be written to account for sub-types
   if not (last_act_num >= 0)
   then
      raise_application_error(-20006, 'games_tab.check_rec(): Number of Last Actions to Display must be greater than or equal to zero');
   end if;
   -- 9) Set eff_beg_dtm, if needed
   -- 10) Set aud_beg_usr and aud_beg_dtm
end check_rec;
----------------------------------------
-- Check Constraints for a games Record
function rec_status
      (id_in  in NUMBER
      )  return varchar2
is
   fs_save    boolean  := util.get_fold_strings;
   ud_save    boolean  := util.get_use_defaults;
   old_tab  games%ROWTYPE;
   new_tab  games%ROWTYPE;
begin
   select * into old_tab from games where id = id_in;
   new_tab := old_tab;
   util.set_fold_strings(FALSE);
   util.set_use_defaults(FALSE);
   check_rec (id  =>  new_tab.id
             ,user_id  =>  new_tab.user_id
             ,name  =>  new_tab.name
             ,last_act_num  =>  new_tab.last_act_num
             ,completed  =>  new_tab.completed
             ,hide_undo  =>  new_tab.hide_undo
             ,hide_accuse  =>  new_tab.hide_accuse
             ,hide_missing  =>  new_tab.hide_missing
             ,hide_my_sugg  =>  new_tab.hide_my_sugg
             ,hide_pcards  =>  new_tab.hide_pcards
             ,hide_sugg_hist  =>  new_tab.hide_sugg_hist
             );
   if not util.is_equal(old_tab.id, new_tab.id) then
      return 'Data Storage Error on id';
   end if;
   if not util.is_equal(old_tab.user_id, new_tab.user_id) then
      return 'Data Storage Error on user_id';
   end if;
   if not util.is_equal(old_tab.name, new_tab.name) then
      return 'Data Storage Error on name';
   end if;
   if not util.is_equal(old_tab.last_act_num, new_tab.last_act_num) then
      return 'Data Storage Error on last_act_num';
   end if;
   if not util.is_equal(old_tab.completed, new_tab.completed) then
      return 'Data Storage Error on completed';
   end if;
   if not util.is_equal(old_tab.hide_undo, new_tab.hide_undo) then
      return 'Data Storage Error on hide_undo';
   end if;
   if not util.is_equal(old_tab.hide_accuse, new_tab.hide_accuse) then
      return 'Data Storage Error on hide_accuse';
   end if;
   if not util.is_equal(old_tab.hide_missing, new_tab.hide_missing) then
      return 'Data Storage Error on hide_missing';
   end if;
   if not util.is_equal(old_tab.hide_my_sugg, new_tab.hide_my_sugg) then
      return 'Data Storage Error on hide_my_sugg';
   end if;
   if not util.is_equal(old_tab.hide_pcards, new_tab.hide_pcards) then
      return 'Data Storage Error on hide_pcards';
   end if;
   if not util.is_equal(old_tab.hide_sugg_hist, new_tab.hide_sugg_hist) then
      return 'Data Storage Error on hide_sugg_hist';
   end if;
   util.set_use_defaults(ud_save);
   util.set_fold_strings(fs_save);
   return 'OK';
exception
   when others then
      util.set_use_defaults(ud_save);
      util.set_fold_strings(fs_save);
      return sqlerrm;
end rec_status;
----------------------------------------
function get_id
      (games_nk1  in  VARCHAR2
      ,games_nk2  in  VARCHAR2
      ) return NUMBER
   -- For all the Natural Key Columns, Return an ID
is
   retid  NUMBER(38);
begin
   select id
    into  retid
    from  games  GAM
    where GAM.user_id = users_tab.get_id
             (games_nk1
             )
     and  GAM.name = games_nk2
    ;
   return retid;
exception when no_data_found then return null;
end get_id;
----------------------------------------
function get_nk
      (id_in  in  NUMBER)
   return VARCHAR2
   -- For an ID, return a delimited list of Natural Key Values
is
   rtxt  VARCHAR2(4000);
begin
   select substr(   users_tab.get_nk(GAM.user_id)
    || util.nk_sep || GAM.name
                         ,1 ,4000)
    into  rtxt
    from  games GAM
    where GAM.id = id_in;
   return rtxt;
exception when no_data_found then return null;
end get_nk;
----------------------------------------
-- Should be called exclusively by the BI Trigger
--   or the "ins" procedure below
procedure ins_bi_trigger
      (n_id  in out nocopy  NUMBER
      ,n_user_id  in out nocopy  NUMBER
      ,n_name  in out nocopy  VARCHAR2
      ,n_last_act_num  in out nocopy  NUMBER
      ,n_completed  in out nocopy  VARCHAR2
      ,n_hide_undo  in out nocopy  VARCHAR2
      ,n_hide_accuse  in out nocopy  VARCHAR2
      ,n_hide_missing  in out nocopy  VARCHAR2
      ,n_hide_my_sugg  in out nocopy  VARCHAR2
      ,n_hide_pcards  in out nocopy  VARCHAR2
      ,n_hide_sugg_hist  in out nocopy  VARCHAR2
      )
is
begin
   -- BI Trigger will have run_tab = TRUE, otherwise FALSE
   -- Set n_id, if needed
   if n_id is null then
      select games_seq.nextval
       into  n_id from dual;
   elsif n_id = 0 then
      raise_application_error(-20019, 'ID of zero is not allowed');
   end if;
   check_rec (id  =>  n_id
             ,user_id  =>  n_user_id
             ,name  =>  n_name
             ,last_act_num  =>  n_last_act_num
             ,completed  =>  n_completed
             ,hide_undo  =>  n_hide_undo
             ,hide_accuse  =>  n_hide_accuse
             ,hide_missing  =>  n_hide_missing
             ,hide_my_sugg  =>  n_hide_my_sugg
             ,hide_pcards  =>  n_hide_pcards
             ,hide_sugg_hist  =>  n_hide_sugg_hist
             );
end ins_bi_trigger;
----------------------------------------
-- Can be called from anywhere, except the BI Trigger
procedure ins
      (n_rec  in out nocopy  games%ROWTYPE
      )
is
begin
   run_tab := FALSE;
   ins_bi_trigger (n_id  =>  n_rec.id
       ,n_user_id  =>  n_rec.user_id
       ,n_name  =>  n_rec.name
       ,n_last_act_num  =>  n_rec.last_act_num
       ,n_completed  =>  n_rec.completed
       ,n_hide_undo  =>  n_rec.hide_undo
       ,n_hide_accuse  =>  n_rec.hide_accuse
       ,n_hide_missing  =>  n_rec.hide_missing
       ,n_hide_my_sugg  =>  n_rec.hide_my_sugg
       ,n_hide_pcards  =>  n_rec.hide_pcards
       ,n_hide_sugg_hist  =>  n_rec.hide_sugg_hist
       );
   insert into games
         (id
         ,user_id
         ,name
         ,last_act_num
         ,completed
         ,hide_undo
         ,hide_accuse
         ,hide_missing
         ,hide_my_sugg
         ,hide_pcards
         ,hide_sugg_hist
         )
   values
         (n_rec.id
         ,n_rec.user_id
         ,n_rec.name
         ,n_rec.last_act_num
         ,n_rec.completed
         ,n_rec.hide_undo
         ,n_rec.hide_accuse
         ,n_rec.hide_missing
         ,n_rec.hide_my_sugg
         ,n_rec.hide_pcards
         ,n_rec.hide_sugg_hist
         );
   run_tab := TRUE;
exception
   when others then
      run_tab := TRUE;
      raise;
end ins;
----------------------------------------
-- Should be called exclusively by the BU Trigger
--   or the "upd" procedure below
-- Note: the OLD values must be provided to check ignore_no_change
-- Note2:  Select for Update Lock is assumed on old values row
procedure upd_bu_trigger
      (o_id  in  NUMBER
      ,o_user_id  in  NUMBER
      ,n_user_id  in out nocopy  NUMBER
      ,o_name  in  VARCHAR2
      ,n_name  in out nocopy  VARCHAR2
      ,o_last_act_num  in  NUMBER
      ,n_last_act_num  in out nocopy  NUMBER
      ,o_completed  in  VARCHAR2
      ,n_completed  in out nocopy  VARCHAR2
      ,o_hide_undo  in  VARCHAR2
      ,n_hide_undo  in out nocopy  VARCHAR2
      ,o_hide_accuse  in  VARCHAR2
      ,n_hide_accuse  in out nocopy  VARCHAR2
      ,o_hide_missing  in  VARCHAR2
      ,n_hide_missing  in out nocopy  VARCHAR2
      ,o_hide_my_sugg  in  VARCHAR2
      ,n_hide_my_sugg  in out nocopy  VARCHAR2
      ,o_hide_pcards  in  VARCHAR2
      ,n_hide_pcards  in out nocopy  VARCHAR2
      ,o_hide_sugg_hist  in  VARCHAR2
      ,n_hide_sugg_hist  in out nocopy  VARCHAR2
      ,run_update  out  boolean
      )
is
begin
   run_update := TRUE;
   -- BU Trigger will have run_tab = TRUE, otherwise FALSE
   if     o_user_id = n_user_id
     and  o_name = n_name
     and  o_last_act_num = n_last_act_num
     and  util.is_equal(o_completed, n_completed)
     and  util.is_equal(o_hide_undo, n_hide_undo)
     and  util.is_equal(o_hide_accuse, n_hide_accuse)
     and  util.is_equal(o_hide_missing, n_hide_missing)
     and  util.is_equal(o_hide_my_sugg, n_hide_my_sugg)
     and  util.is_equal(o_hide_pcards, n_hide_pcards)
     and  util.is_equal(o_hide_sugg_hist, n_hide_sugg_hist)
   then
      if util.get_ignore_no_change then
         run_update := FALSE;
         return;
      end if;
      raise_application_error(-20008, 'games_tab.upd(): Must update one of'
            || ' user_id'
            || ', name'
            || ', last_act_num'
            || ', completed'
            || ', hide_undo'
            || ', hide_accuse'
            || ', hide_missing'
            || ', hide_my_sugg'
            || ', hide_pcards'
            || ', hide_sugg_hist'
            || '.');
   end if;
   check_rec (id  =>  o_id
             ,user_id  =>  n_user_id
             ,name  =>  n_name
             ,last_act_num  =>  n_last_act_num
             ,completed  =>  n_completed
             ,hide_undo  =>  n_hide_undo
             ,hide_accuse  =>  n_hide_accuse
             ,hide_missing  =>  n_hide_missing
             ,hide_my_sugg  =>  n_hide_my_sugg
             ,hide_pcards  =>  n_hide_pcards
             ,hide_sugg_hist  =>  n_hide_sugg_hist
             );
end upd_bu_trigger;
----------------------------------------
-- Can be called from anywhere, except the BU Trigger
-- Note: the OLD values must be provided to set new_rec values
procedure upd
      (o_rec  in             games%ROWTYPE
      ,n_rec  in out nocopy  games%ROWTYPE
      )
is
   c_rec    games%ROWTYPE;  -- Current Row Data
   run_upd  boolean;
begin
   if o_rec.id is null then return; end if;
   run_tab := FALSE;
   select * into c_rec from games t1
    where t1.id = o_rec.id FOR UPDATE;
   -- If old and new match, then replace new with current
   --   because there was no original intent to change new
   if o_rec.user_id = n_rec.user_id then
      n_rec.user_id := c_rec.user_id;
   end if;
   if o_rec.name = n_rec.name then
      n_rec.name := c_rec.name;
   end if;
   if o_rec.last_act_num = n_rec.last_act_num then
      n_rec.last_act_num := c_rec.last_act_num;
   end if;
   if util.is_equal(o_rec.completed, n_rec.completed) then
      n_rec.completed := c_rec.completed;
   end if;
   if util.is_equal(o_rec.hide_undo, n_rec.hide_undo) then
      n_rec.hide_undo := c_rec.hide_undo;
   end if;
   if util.is_equal(o_rec.hide_accuse, n_rec.hide_accuse) then
      n_rec.hide_accuse := c_rec.hide_accuse;
   end if;
   if util.is_equal(o_rec.hide_missing, n_rec.hide_missing) then
      n_rec.hide_missing := c_rec.hide_missing;
   end if;
   if util.is_equal(o_rec.hide_my_sugg, n_rec.hide_my_sugg) then
      n_rec.hide_my_sugg := c_rec.hide_my_sugg;
   end if;
   if util.is_equal(o_rec.hide_pcards, n_rec.hide_pcards) then
      n_rec.hide_pcards := c_rec.hide_pcards;
   end if;
   if util.is_equal(o_rec.hide_sugg_hist, n_rec.hide_sugg_hist) then
      n_rec.hide_sugg_hist := c_rec.hide_sugg_hist;
   end if;
   -- Update the new data based on the current data
   upd_bu_trigger (o_id  =>  c_rec.id
      ,o_user_id  =>  c_rec.user_id
      ,n_user_id  =>  n_rec.user_id
      ,o_name  =>  c_rec.name
      ,n_name  =>  n_rec.name
      ,o_last_act_num  =>  c_rec.last_act_num
      ,n_last_act_num  =>  n_rec.last_act_num
      ,o_completed  =>  c_rec.completed
      ,n_completed  =>  n_rec.completed
      ,o_hide_undo  =>  c_rec.hide_undo
      ,n_hide_undo  =>  n_rec.hide_undo
      ,o_hide_accuse  =>  c_rec.hide_accuse
      ,n_hide_accuse  =>  n_rec.hide_accuse
      ,o_hide_missing  =>  c_rec.hide_missing
      ,n_hide_missing  =>  n_rec.hide_missing
      ,o_hide_my_sugg  =>  c_rec.hide_my_sugg
      ,n_hide_my_sugg  =>  n_rec.hide_my_sugg
      ,o_hide_pcards  =>  c_rec.hide_pcards
      ,n_hide_pcards  =>  n_rec.hide_pcards
      ,o_hide_sugg_hist  =>  c_rec.hide_sugg_hist
      ,n_hide_sugg_hist  =>  n_rec.hide_sugg_hist
      ,run_update  =>  run_upd
      );
   if run_upd then
      update games
        set  user_id = n_rec.user_id
            ,name = n_rec.name
            ,last_act_num = n_rec.last_act_num
            ,completed = n_rec.completed
            ,hide_undo = n_rec.hide_undo
            ,hide_accuse = n_rec.hide_accuse
            ,hide_missing = n_rec.hide_missing
            ,hide_my_sugg = n_rec.hide_my_sugg
            ,hide_pcards = n_rec.hide_pcards
            ,hide_sugg_hist = n_rec.hide_sugg_hist
       where id = o_rec.id;
   end if;
   run_tab := TRUE;
exception
   when others then
      run_tab := TRUE;
      raise;
end upd;
----------------------------------------
-- Can be called from anywhere, except the BU Trigger
-- Note: the OLD values must be provided to check ignore_no_change
procedure upd
      (n_rec  in out nocopy  games%ROWTYPE
      )
is
   c_rec    games%ROWTYPE;  -- Current Row Data
   run_upd  boolean;
begin
   if n_rec.id is null then return; end if;
   run_tab := FALSE;
   select * into c_rec from games t1
    where t1.id = n_rec.id FOR UPDATE;
   upd_bu_trigger (o_id  =>  c_rec.id
      ,o_user_id  =>  c_rec.user_id
      ,n_user_id  =>  n_rec.user_id
      ,o_name  =>  c_rec.name
      ,n_name  =>  n_rec.name
      ,o_last_act_num  =>  c_rec.last_act_num
      ,n_last_act_num  =>  n_rec.last_act_num
      ,o_completed  =>  c_rec.completed
      ,n_completed  =>  n_rec.completed
      ,o_hide_undo  =>  c_rec.hide_undo
      ,n_hide_undo  =>  n_rec.hide_undo
      ,o_hide_accuse  =>  c_rec.hide_accuse
      ,n_hide_accuse  =>  n_rec.hide_accuse
      ,o_hide_missing  =>  c_rec.hide_missing
      ,n_hide_missing  =>  n_rec.hide_missing
      ,o_hide_my_sugg  =>  c_rec.hide_my_sugg
      ,n_hide_my_sugg  =>  n_rec.hide_my_sugg
      ,o_hide_pcards  =>  c_rec.hide_pcards
      ,n_hide_pcards  =>  n_rec.hide_pcards
      ,o_hide_sugg_hist  =>  c_rec.hide_sugg_hist
      ,n_hide_sugg_hist  =>  n_rec.hide_sugg_hist
      ,run_update  =>  run_upd
      );
   if run_upd then
      update games
        set  user_id = n_rec.user_id
            ,name = n_rec.name
            ,last_act_num = n_rec.last_act_num
            ,completed = n_rec.completed
            ,hide_undo = n_rec.hide_undo
            ,hide_accuse = n_rec.hide_accuse
            ,hide_missing = n_rec.hide_missing
            ,hide_my_sugg = n_rec.hide_my_sugg
            ,hide_pcards = n_rec.hide_pcards
            ,hide_sugg_hist = n_rec.hide_sugg_hist
       where id = c_rec.id;
   end if;
   run_tab := TRUE;
exception
   when others then
      run_tab := TRUE;
      raise;
end upd;
----------------------------------------
-- There is no delete trigger for this table
----------------------------------------
-- Can be called from anywhere, except the BD Trigger
procedure del
      (o_id  in  NUMBER
      )
is
begin
   -- NOTE: there is no delete trigger for this table
   if o_id is null then return; end if;
   run_tab := FALSE;
   delete from games GAM
    where GAM.id = o_id;
   run_tab := TRUE;
end del;
----------------------------------------
end games_tab;
/

set define on
