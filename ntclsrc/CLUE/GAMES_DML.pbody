
--
--  Create CLUE.GAMES_DML Package Body
--

set define off


--DBMS_METADATA:CLUE.GAMES_DML

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CLUE"."GAMES_DML" 
is

 -- Package Body Games_Dml
 -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:31 AM

   --
   --
   -- ? Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


----------------------------------------
function get_next_id
      return NUMBER
is
   retid  NUMBER;
begin
   select games_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
----------------------------------------
function get_curr_id
      return NUMBER
is
   retid  NUMBER;
begin
   select games_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
----------------------------------------
function get_id
      (users_nk1  in  VARCHAR2
      ,name  in  VARCHAR2
      ) return number
   -- For all the Natural Key Columns, Return an ID
is
begin
   return games_tab.get_id
      (users_nk1
      ,name
      );
end get_id;
----------------------------------------
-- For all the Natural Key Column IDs, Return an ID
function get_id2
      (user_id_in  in  NUMBER
      ,name_in  in  VARCHAR2
      ) return NUMBER
is
   retid  NUMBER(38);
begin
   select id
    into  retid
    from  games  GAM
    where user_id_in = GAM.user_id
     and  name_in = GAM.name
    ;
   return retid;
exception when no_data_found then return null;
end get_id2;
----------------------------------------
function get_nk
      (id_in  in  NUMBER)
   return VARCHAR2
   -- For an ID, return a delimited list of Natural Key Values
is
begin
   return games_tab.get_nk(id_in);
end get_nk;
----------------------------------------
procedure clear
      (n_rec  in out nocopy  games_act%ROWTYPE
      )
is
begin
   n_rec.id := null;
   n_rec.user_id := null;
   n_rec.users_nk1 := null;
   n_rec.name := null;
   n_rec.last_act_num := null;
   n_rec.completed := null;
   n_rec.hide_undo := null;
   n_rec.hide_accuse := null;
   n_rec.hide_missing := null;
   n_rec.hide_my_sugg := null;
   n_rec.hide_pcards := null;
   n_rec.hide_sugg_hist := null;
end clear;
----------
function clear
      (n_rec  in out nocopy  games_act%ROWTYPE
      ) return varchar2
is
begin
   clear(n_rec);
   return '';
exception when others then return sqlerrm;
end clear;
----------------------------------------
procedure clear
      (n_tab  in out nocopy  games%ROWTYPE
      )
is
begin
   n_tab.id := null;
   n_tab.user_id := null;
   n_tab.name := null;
   n_tab.last_act_num := null;
   n_tab.completed := null;
   n_tab.hide_undo := null;
   n_tab.hide_accuse := null;
   n_tab.hide_missing := null;
   n_tab.hide_my_sugg := null;
   n_tab.hide_pcards := null;
   n_tab.hide_sugg_hist := null;
end clear;
----------
function clear
      (n_tab  in out nocopy  games%ROWTYPE
      ) return varchar2
is
begin
   clear(n_tab);
   return '';
exception when others then return sqlerrm;
end clear;
----------------------------------------
procedure get_rec_by_id
      (n_rec  in out nocopy  games_act%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_rec.id is null then
      clear(n_rec);
   else
      select * into n_rec from games_act
       where id = n_rec.id;
   end if;
   return;
   util.trc_time_interval('games_dml.get_rec_by_id(act rec) ID:' || n_rec.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_rec  in out nocopy  games_act%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_rec);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
----------------------------------------
procedure get_rec_by_id
      (n_tab  in out nocopy  games%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if n_tab.id is null then
      clear(n_tab);
   else
      select * into n_tab from games
       where id = n_tab.id;
   end if;
   return;
   util.trc_time_interval('games_dml.get_rec_by_id(tab rec) ID:' || n_tab.id, start_tstamp);
end get_rec_by_id;
----------
function get_rec_by_id
      (n_tab  in out nocopy  games%ROWTYPE
      ) return varchar2
is
begin
   get_rec_by_id(n_tab);
   return '';
exception when others then return sqlerrm;
end get_rec_by_id;
----------------------------------------
-- Insert a games ACTIVE View Record
procedure ins
      (new_rec  in out nocopy  games_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   new_tab  games%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   -- Set new_rec.user_id, if needed
   if new_rec.user_id is null then
      if    new_rec.users_nk1 is not null
      then
         new_rec.user_id := users_tab.get_id
            (new_rec.users_nk1
            );
         if new_rec.user_id is null then
            raise_application_error(-20020, 'Null ID was returned from users_tab.get_id');
         end if;
      end if;
   end if;
   new_tab.id := new_rec.id;
   new_tab.user_id := new_rec.user_id;
   new_tab.name := new_rec.name;
   new_tab.last_act_num := new_rec.last_act_num;
   new_tab.completed := new_rec.completed;
   new_tab.hide_undo := new_rec.hide_undo;
   new_tab.hide_accuse := new_rec.hide_accuse;
   new_tab.hide_missing := new_rec.hide_missing;
   new_tab.hide_my_sugg := new_rec.hide_my_sugg;
   new_tab.hide_pcards := new_rec.hide_pcards;
   new_tab.hide_sugg_hist := new_rec.hide_sugg_hist;
   games_tab.ins(new_tab);
   if upd_vals_in then
      -- games_tab.ins returns a new ID, if needed
      select * into new_rec from games_act
       where id = new_tab.id;
   end if;
   return;
   util.trc_time_interval('games_dml.ins(act rec) ID:' || new_rec.id, start_tstamp);
end ins;
----------
function ins
      (new_rec  in out nocopy  games_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   ins(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end ins;
----------------------------------------
-- Insert a games Table Record
procedure ins
      (new_tab   in out nocopy  games%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   games_tab.ins(new_tab);
   return;
   util.trc_time_interval('games_dml.ins(tab rec) ID:' || new_tab.id, start_tstamp);
end ins;
----------
function ins
      (new_tab   in out nocopy  games%ROWTYPE
      ) return varchar2
is
begin
   ins(new_tab);
   return '';
exception when others then return sqlerrm;
end ins;
----------------------------------------
-- Insert columns for games ACTIVE View
--   without returning updated data in each column
procedure ins
      (id_in  in  NUMBER default null
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,last_act_num_in  in  NUMBER default null
      ,completed_in  in  VARCHAR2 default null
      ,hide_undo_in  in  VARCHAR2 default null
      ,hide_accuse_in  in  VARCHAR2 default null
      ,hide_missing_in  in  VARCHAR2 default null
      ,hide_my_sugg_in  in  VARCHAR2 default null
      ,hide_pcards_in  in  VARCHAR2 default null
      ,hide_sugg_hist_in  in  VARCHAR2 default null
      )
is
   new_rec  games_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.user_id := user_id_in;
   new_rec.users_nk1 := users_nk1_in;
   new_rec.name := name_in;
   new_rec.last_act_num := last_act_num_in;
   new_rec.completed := completed_in;
   new_rec.hide_undo := hide_undo_in;
   new_rec.hide_accuse := hide_accuse_in;
   new_rec.hide_missing := hide_missing_in;
   new_rec.hide_my_sugg := hide_my_sugg_in;
   new_rec.hide_pcards := hide_pcards_in;
   new_rec.hide_sugg_hist := hide_sugg_hist_in;
   ins(new_rec, FALSE);
   return;
   util.trc_time_interval('games_dml.ins(tab col) ID:' || id_in, start_tstamp);
end ins;
----------
function ins
      (id_in  in  NUMBER default null
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,last_act_num_in  in  NUMBER default null
      ,completed_in  in  VARCHAR2 default null
      ,hide_undo_in  in  VARCHAR2 default null
      ,hide_accuse_in  in  VARCHAR2 default null
      ,hide_missing_in  in  VARCHAR2 default null
      ,hide_my_sugg_in  in  VARCHAR2 default null
      ,hide_pcards_in  in  VARCHAR2 default null
      ,hide_sugg_hist_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   ins
      (id_in
      ,user_id_in
      ,users_nk1_in
      ,name_in
      ,last_act_num_in
      ,completed_in
      ,hide_undo_in
      ,hide_accuse_in
      ,hide_missing_in
      ,hide_my_sugg_in
      ,hide_pcards_in
      ,hide_sugg_hist_in
      );
   return '';
exception when others then return sqlerrm;
end ins;
----------------------------------------
-- Insert columns for games ACTIVE View
--   with updated data returned in each column
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,users_nk1_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      )
is
   new_rec  games_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.user_id := user_id_io;
   new_rec.users_nk1 := users_nk1_io;
   new_rec.name := name_io;
   new_rec.last_act_num := last_act_num_io;
   new_rec.completed := completed_io;
   new_rec.hide_undo := hide_undo_io;
   new_rec.hide_accuse := hide_accuse_io;
   new_rec.hide_missing := hide_missing_io;
   new_rec.hide_my_sugg := hide_my_sugg_io;
   new_rec.hide_pcards := hide_pcards_io;
   new_rec.hide_sugg_hist := hide_sugg_hist_io;
   --
   ins(new_rec);
   --
   id_io := new_rec.id;
   user_id_io := new_rec.user_id;
   users_nk1_io := new_rec.users_nk1;
   name_io := new_rec.name;
   last_act_num_io := new_rec.last_act_num;
   completed_io := new_rec.completed;
   hide_undo_io := new_rec.hide_undo;
   hide_accuse_io := new_rec.hide_accuse;
   hide_missing_io := new_rec.hide_missing;
   hide_my_sugg_io := new_rec.hide_my_sugg;
   hide_pcards_io := new_rec.hide_pcards;
   hide_sugg_hist_io := new_rec.hide_sugg_hist;
   return;
   util.trc_time_interval('games_dml.ins2(tab col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,users_nk1_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,user_id_io
      ,users_nk1_io
      ,name_io
      ,last_act_num_io
      ,completed_io
      ,hide_undo_io
      ,hide_accuse_io
      ,hide_missing_io
      ,hide_my_sugg_io
      ,hide_pcards_io
      ,hide_sugg_hist_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
----------------------------------------
-- Insert columns for games Table
--   with updated data returned in each column
procedure ins2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      )
is
   new_rec  games%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.user_id := user_id_io;
   new_rec.name := name_io;
   new_rec.last_act_num := last_act_num_io;
   new_rec.completed := completed_io;
   new_rec.hide_undo := hide_undo_io;
   new_rec.hide_accuse := hide_accuse_io;
   new_rec.hide_missing := hide_missing_io;
   new_rec.hide_my_sugg := hide_my_sugg_io;
   new_rec.hide_pcards := hide_pcards_io;
   new_rec.hide_sugg_hist := hide_sugg_hist_io;
   --
   games_tab.ins(new_rec);
   --
   id_io := new_rec.id;
   user_id_io := new_rec.user_id;
   name_io := new_rec.name;
   last_act_num_io := new_rec.last_act_num;
   completed_io := new_rec.completed;
   hide_undo_io := new_rec.hide_undo;
   hide_accuse_io := new_rec.hide_accuse;
   hide_missing_io := new_rec.hide_missing;
   hide_my_sugg_io := new_rec.hide_my_sugg;
   hide_pcards_io := new_rec.hide_pcards;
   hide_sugg_hist_io := new_rec.hide_sugg_hist;
   return;
   util.trc_time_interval('games_dml.ins2(tab col) ID:' || id_io, start_tstamp);
end ins2;
----------
function ins2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   ins2
      (id_io
      ,user_id_io
      ,name_io
      ,last_act_num_io
      ,completed_io
      ,hide_undo_io
      ,hide_accuse_io
      ,hide_missing_io
      ,hide_my_sugg_io
      ,hide_pcards_io
      ,hide_sugg_hist_io
      );
   return '';
exception when others then return sqlerrm;
end ins2;
----------------------------------------
-- Special Use Update for Specific Column Updates.
--   Only differences between old and new data will be updated.
--   Set upd_val_in TRUE to get updated data in new_rec
procedure upd
      (old_rec  in  games_act%ROWTYPE
      ,new_rec  in out nocopy  games_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      )
is
   old_tab  games%ROWTYPE;
   new_tab  games%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   if old_rec.id is null then
      raise_application_error (-20023, 'ID is null');
   end if;
   -- Set new_rec.user_id, if needed
   if new_rec.user_id is null then
      if    new_rec.users_nk1 is not null
      then
         new_rec.user_id := users_tab.get_id
            (new_rec.users_nk1
            );
         if new_rec.user_id is null then
            raise_application_error(-20020, 'Null ID was returned from users_tab.get_id');
         end if;
      end if;
   end if;
   -- Set new_rec.user_id, if needed
   if new_rec.user_id = old_rec.user_id then
      if    not (new_rec.users_nk1 = old_rec.users_nk1)
      then
         new_rec.user_id := users_tab.get_id
            (new_rec.users_nk1
            );
         if new_rec.user_id is null then
            raise_application_error(-20020, 'Null ID was returned from users_tab.get_id');
         end if;
      end if;
   end if;
   -- Load the Table Record from the View Record
   old_tab.id := old_rec.id;
   new_tab.id := new_rec.id;
   old_tab.user_id := old_rec.user_id;
   new_tab.user_id := new_rec.user_id;
   old_tab.name := old_rec.name;
   new_tab.name := new_rec.name;
   old_tab.last_act_num := old_rec.last_act_num;
   new_tab.last_act_num := new_rec.last_act_num;
   old_tab.completed := old_rec.completed;
   new_tab.completed := new_rec.completed;
   old_tab.hide_undo := old_rec.hide_undo;
   new_tab.hide_undo := new_rec.hide_undo;
   old_tab.hide_accuse := old_rec.hide_accuse;
   new_tab.hide_accuse := new_rec.hide_accuse;
   old_tab.hide_missing := old_rec.hide_missing;
   new_tab.hide_missing := new_rec.hide_missing;
   old_tab.hide_my_sugg := old_rec.hide_my_sugg;
   new_tab.hide_my_sugg := new_rec.hide_my_sugg;
   old_tab.hide_pcards := old_rec.hide_pcards;
   new_tab.hide_pcards := new_rec.hide_pcards;
   old_tab.hide_sugg_hist := old_rec.hide_sugg_hist;
   new_tab.hide_sugg_hist := new_rec.hide_sugg_hist;
   -- Run the update
   games_tab.upd(old_tab, new_tab);
   if upd_vals_in then
      -- Load the View Record from the Returned (new) Table Record
      -- games_tab.upd should have set new ID = old ID
      select * into new_rec from games_act
       where id = old_tab.id;
   end if;
   return;
   util.trc_time_interval('games_dml.upd(trigger) ID:' || old_tab.id, start_tstamp);
end upd;
----------
function upd
      (old_rec  in  games_act%ROWTYPE
      ,new_rec  in out nocopy  games_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2
is
begin
   upd(old_rec, new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
----------------------------------------
-- Special Use Update for Specific Column Updates.
--   Only differences between old and new data will be updated.
--   Set upd_val_in TRUE to get updated data in new_rec
procedure upd
      (old_tab  in  games%ROWTYPE
      ,new_tab  in out nocopy  games%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if old_tab.id is null then
      raise_application_error (-20023, 'ID is null');
   end if;
   -- Run the update
   games_tab.upd(old_tab, new_tab);
   return;
   util.trc_time_interval('games_dml.upd(trigger) ID:' || old_tab.id, start_tstamp);
end upd;
----------
function upd
      (old_tab  in  games%ROWTYPE
      ,new_tab  in out nocopy  games%ROWTYPE
      ) return varchar2
is
begin
   upd(old_tab, new_tab);
   return '';
exception when others then return sqlerrm;
end upd;
----------------------------------------
-- Update a games ACTIVE View Record
procedure upd
      (new_rec  in out nocopy  games_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      )
is
   old_rec  games_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   if new_rec.id is null then
      if    new_rec.users_nk1 is not null
        and new_rec.name is not null
      then
         new_rec.id := games_tab.get_id
            (new_rec.users_nk1
            ,new_rec.name
            );
      end if;
   end if;
   if new_rec.id is null then
      if    new_rec.user_id is not null
        and new_rec.name is not null
      then
         begin
            select id into new_rec.id from games
             where user_id = new_rec.user_id
              and  name = new_rec.name
               ;
         exception when NO_DATA_FOUND then new_rec.id := null;
         end;
      end if;
   end if;
   if new_rec.id is null then
      raise_application_error (-20023, 'ID is null and could not be found from Natural Keys');
   end if;
   select * into old_rec from games_act
    where id = new_rec.id;
   upd(old_rec, new_rec, upd_vals_in);
   return;
   util.trc_time_interval('games_dml.upd(act rec) ID:' || new_rec.id, start_tstamp);
end upd;
----------
function upd
      (new_rec  in out nocopy  games_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2
is
begin
   upd(new_rec, upd_vals_in);
   return '';
exception when others then return sqlerrm;
end upd;
----------------------------------------
-- Update a games Table Record
procedure upd
      (new_tab   in out nocopy  games%ROWTYPE
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if new_tab.id is null then
      if    new_tab.user_id is not null
        and new_tab.name is not null
      then
         begin
            select id into new_tab.id from games
             where user_id = new_tab.user_id
              and  name = new_tab.name
               ;
         exception when NO_DATA_FOUND then new_tab.id := null;
         end;
      end if;
   end if;
   if new_tab.id is null then
      raise_application_error (-20023, 'ID is null and could not be found from Natural Keys');
   end if;
   games_tab.upd(new_tab);
   return;
   util.trc_time_interval('games_dml.upd(tab rec) ID:' || new_tab.id, start_tstamp);
end upd;
----------
function upd
      (new_tab   in out nocopy  games%ROWTYPE
      ) return varchar2
is
begin
   upd(new_tab);
   return '';
exception when others then return sqlerrm;
end upd;
----------------------------------------
-- Update columns for games ACTIVE View
--   without returning updated data in each column
procedure upd
      (id_in  in  NUMBER default null
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,last_act_num_in  in  NUMBER default null
      ,completed_in  in  VARCHAR2 default null
      ,hide_undo_in  in  VARCHAR2 default null
      ,hide_accuse_in  in  VARCHAR2 default null
      ,hide_missing_in  in  VARCHAR2 default null
      ,hide_my_sugg_in  in  VARCHAR2 default null
      ,hide_pcards_in  in  VARCHAR2 default null
      ,hide_sugg_hist_in  in  VARCHAR2 default null
      )
is
   new_rec  games_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_in;
   new_rec.user_id := user_id_in;
   new_rec.users_nk1 := users_nk1_in;
   new_rec.name := name_in;
   new_rec.last_act_num := last_act_num_in;
   new_rec.completed := completed_in;
   new_rec.hide_undo := hide_undo_in;
   new_rec.hide_accuse := hide_accuse_in;
   new_rec.hide_missing := hide_missing_in;
   new_rec.hide_my_sugg := hide_my_sugg_in;
   new_rec.hide_pcards := hide_pcards_in;
   new_rec.hide_sugg_hist := hide_sugg_hist_in;
   -- Make corrections when ID is supplied, but NK is missing
   if    new_rec.ID is not null
     and new_rec.users_nk1 is null
     and new_rec.name is null
   then
      select GAM.users_nk1
            ,GAM.name
       into  new_rec.users_nk1
            ,new_rec.name
       from  games_act  GAM
       where GAM.id = new_rec.ID;
   end if;
   -- Make corrections when user_id is supplied, but the Natural Key is missing
   if    new_rec.user_id is not null
     and new_rec.users_nk1 is null
   then
      select USR.name
       into  new_rec.users_nk1
       from  users_act  USR
       where USR.id = new_rec.user_id;
   end if;
   upd(new_rec, FALSE);
   return;
   util.trc_time_interval('games_dml.upd(act col) ID:' || id_in, start_tstamp);
end upd;
----------
function upd
      (id_in  in  NUMBER default null
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,last_act_num_in  in  NUMBER default null
      ,completed_in  in  VARCHAR2 default null
      ,hide_undo_in  in  VARCHAR2 default null
      ,hide_accuse_in  in  VARCHAR2 default null
      ,hide_missing_in  in  VARCHAR2 default null
      ,hide_my_sugg_in  in  VARCHAR2 default null
      ,hide_pcards_in  in  VARCHAR2 default null
      ,hide_sugg_hist_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   upd
      (id_in
      ,user_id_in
      ,users_nk1_in
      ,name_in
      ,last_act_num_in
      ,completed_in
      ,hide_undo_in
      ,hide_accuse_in
      ,hide_missing_in
      ,hide_my_sugg_in
      ,hide_pcards_in
      ,hide_sugg_hist_in
      );
   return '';
exception when others then return sqlerrm;
end upd;
----------------------------------------
-- Update columns for games ACTIVE View
--   with updated data returned in each column
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,users_nk1_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      )
is
   new_rec  games_act%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   new_rec.id := id_io;
   new_rec.user_id := user_id_io;
   new_rec.users_nk1 := users_nk1_io;
   new_rec.name := name_io;
   new_rec.last_act_num := last_act_num_io;
   new_rec.completed := completed_io;
   new_rec.hide_undo := hide_undo_io;
   new_rec.hide_accuse := hide_accuse_io;
   new_rec.hide_missing := hide_missing_io;
   new_rec.hide_my_sugg := hide_my_sugg_io;
   new_rec.hide_pcards := hide_pcards_io;
   new_rec.hide_sugg_hist := hide_sugg_hist_io;
   --
   --  upd(new_rec) will set new_rec.id as needed
   upd(new_rec);
   --
   id_io := new_rec.id;
   user_id_io := new_rec.user_id;
   users_nk1_io := new_rec.users_nk1;
   name_io := new_rec.name;
   last_act_num_io := new_rec.last_act_num;
   completed_io := new_rec.completed;
   hide_undo_io := new_rec.hide_undo;
   hide_accuse_io := new_rec.hide_accuse;
   hide_missing_io := new_rec.hide_missing;
   hide_my_sugg_io := new_rec.hide_my_sugg;
   hide_pcards_io := new_rec.hide_pcards;
   hide_sugg_hist_io := new_rec.hide_sugg_hist;
   return;
   util.trc_time_interval('games_dml.upd2(act col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,users_nk1_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
   upd2
      (id_io
      ,user_id_io
      ,users_nk1_io
      ,name_io
      ,last_act_num_io
      ,completed_io
      ,hide_undo_io
      ,hide_accuse_io
      ,hide_missing_io
      ,hide_my_sugg_io
      ,hide_pcards_io
      ,hide_sugg_hist_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;
----------------------------------------
-- Update columns for games Table
--   with updated data returned in each column
procedure upd2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      )
is
   new_rec  games%ROWTYPE;
   start_tstamp  timestamp := systimestamp;
begin
   if id_io is null then
      if    user_id_io is not null
        and name_io is not null
      then
         begin
            select id into id_io from games
             where user_id = user_id_io
              and  name = name_io
               ;
         exception when NO_DATA_FOUND then id_io := null;
         end;
      end if;
   end if;
   if id_io is null then
      raise_application_error (-20023, 'ID is null and could not be found from Natural Keys');
   end if;
   new_rec.id := id_io;
   new_rec.user_id := user_id_io;
   new_rec.name := name_io;
   new_rec.last_act_num := last_act_num_io;
   new_rec.completed := completed_io;
   new_rec.hide_undo := hide_undo_io;
   new_rec.hide_accuse := hide_accuse_io;
   new_rec.hide_missing := hide_missing_io;
   new_rec.hide_my_sugg := hide_my_sugg_io;
   new_rec.hide_pcards := hide_pcards_io;
   new_rec.hide_sugg_hist := hide_sugg_hist_io;
   --
   games_tab.upd(new_rec);
   --
   id_io := new_rec.id;
   user_id_io := new_rec.user_id;
   name_io := new_rec.name;
   last_act_num_io := new_rec.last_act_num;
   completed_io := new_rec.completed;
   hide_undo_io := new_rec.hide_undo;
   hide_accuse_io := new_rec.hide_accuse;
   hide_missing_io := new_rec.hide_missing;
   hide_my_sugg_io := new_rec.hide_my_sugg;
   hide_pcards_io := new_rec.hide_pcards;
   hide_sugg_hist_io := new_rec.hide_sugg_hist;
   return;
   util.trc_time_interval('games_dml.upd2(tab col) ID:' || id_io, start_tstamp);
end upd2;
----------
function upd2
      (id_io  in out nocopy  NUMBER
      ,user_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,last_act_num_io  in out nocopy  NUMBER
      ,completed_io  in out nocopy  VARCHAR2
      ,hide_undo_io  in out nocopy  VARCHAR2
      ,hide_accuse_io  in out nocopy  VARCHAR2
      ,hide_missing_io  in out nocopy  VARCHAR2
      ,hide_my_sugg_io  in out nocopy  VARCHAR2
      ,hide_pcards_io  in out nocopy  VARCHAR2
      ,hide_sugg_hist_io  in out nocopy  VARCHAR2
      ) return varchar2
is
begin
    upd2
      (id_io
      ,user_id_io
      ,name_io
      ,last_act_num_io
      ,completed_io
      ,hide_undo_io
      ,hide_accuse_io
      ,hide_missing_io
      ,hide_my_sugg_io
      ,hide_pcards_io
      ,hide_sugg_hist_io
      );
   return '';
exception when others then return sqlerrm;
end upd2;

----------------------------------------
-- Application Delete procedure without updated parameters
procedure del
      (id_in  in  NUMBER default null
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      )
is
   start_tstamp  timestamp := systimestamp;
   tmp_id  NUMBER;
begin
   tmp_id := id_in;
   if tmp_id is null then
      if    users_nk1_in is not null
        and name_in is not null
      then
         tmp_id := games_tab.get_id
            (users_nk1_in
            ,name_in
            );
      end if;
   end if;
   if tmp_id is null then
      if    user_id_in is not null
        and name_in is not null
      then
         begin
            select id into tmp_id from games
             where user_id = user_id_in
              and  name = name_in
               ;
         exception when NO_DATA_FOUND then tmp_id := null;
         end;
      end if;
   end if;
   if tmp_id is null then
      raise_application_error (-20023, 'ID is null and could not be found from Natural Keys');
   end if;
   games_tab.del(tmp_id);
   return;
   util.trc_time_interval('games_dml.del ID:' || id_in, start_tstamp);
end del;
----------
function del
      (id_in  in  NUMBER default null
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   del
      (id_in
      ,user_id_in
      ,users_nk1_in
      ,name_in
      );
   return '';
exception when others then return sqlerrm;
end del;
----------------------------------------
-- Application Delete procedure with updated parameters
procedure del2
      (id_io  in out nocopy  NUMBER
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      )
is
   start_tstamp  timestamp := systimestamp;
begin
   if id_io is null then
      if    users_nk1_in is not null
        and name_in is not null
      then
         id_io := games_tab.get_id
            (users_nk1_in
            ,name_in
            );
      end if;
   end if;
   if id_io is null then
      if    user_id_in is not null
        and name_in is not null
      then
         begin
            select id into id_io from games
             where user_id = user_id_in
              and  name = name_in
               ;
         exception when NO_DATA_FOUND then id_io := null;
         end;
      end if;
   end if;
   if id_io is null then
      raise_application_error (-20023, 'ID is null and could not be found from Natural Keys');
   end if;
   games_tab.del(id_io);
   return;
   util.trc_time_interval('games_dml.del2 ID:' || id_io, start_tstamp);
end del2;
----------
function del2
      (id_io  in out nocopy  NUMBER
      ,user_id_in  in  NUMBER default null
      ,users_nk1_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ) return varchar2
is
begin
   del2
      (id_io
      ,user_id_in
      ,users_nk1_in
      ,name_in
      );
   return '';
exception when others then return sqlerrm;
end del2;
----------------------------------------
procedure load_dim
      (dim_tab  in out nocopy  games%ROWTYPE
      )
is
   -- Special Data Warehouse Dimension Function
   start_tstamp  timestamp := systimestamp;
   procedure private_upd is
      saved_inc  boolean := util.get_ignore_no_change;
   begin
      util.set_ignore_no_change(TRUE);
      upd (dim_tab);
      util.set_ignore_no_change(saved_inc);
   exception
      when others then
         util.set_ignore_no_change(saved_inc);
         raise;
   end private_upd;
begin
   -- Attempt to find matching record based on natural keys
   if dim_tab.id is null then
      begin
         select id
          into  dim_tab.id
          from  games
          where user_id = dim_tab.user_id
           and  user_id = dim_tab.user_id
           and  name = dim_tab.name
         ;
      exception
         when NO_DATA_FOUND then dim_tab.id := null;
      end;
   end if;
   if dim_tab.id is not null then
      -- If found, perform update on non-NK columns that changed
      private_upd;
      return;
      util.trc_time_interval('games_dml.load_dimE ID:' || dim_tab.id, start_tstamp);
   end if;
   -- If not found, insert new record
   begin
      ins(dim_tab);
   exception
      when DUP_VAL_ON_INDEX then
         -- Since this can run multi-threaded, another thread
         --   may have already populated this value.
         private_upd;
   end;
   return;
   util.trc_time_interval('games_dml.load_dim ID:' || dim_tab.id, start_tstamp);
end load_dim;
----------
function load_dim
      (dim_tab  in out nocopy  games%ROWTYPE
      ) return varchar2
is
begin
   load_dim(dim_tab);
   return '';
exception when others then return sqlerrm;
end load_dim;
----------------------------------------
end games_dml;
/

set define on
