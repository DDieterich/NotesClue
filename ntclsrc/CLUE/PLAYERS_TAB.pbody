
--
--  Create CLUE.PLAYERS_TAB Package Body
--

set define off


--DBMS_METADATA:CLUE.PLAYERS_TAB

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CLUE"."PLAYERS_TAB" 
is

-- Package Body Players_Tab
--    Table functions and integrity checks)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:29 AM

   --
   --
   -- ? Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


----------------------------------------
procedure check_rec
      (id  in  NUMBER
      ,game_id  in out nocopy  NUMBER
      ,name  in out nocopy  VARCHAR2
      ,seq  in out nocopy  NUMBER
      ,total_cards  in out nocopy  NUMBER
      )
is
begin
   -- 1) Set Default Values as Needed
   -- 2) Check for NOT NULL
   if game_id is null then
      raise_application_error(-20004, 'players_tab.check_rec(): game_id cannot be null.');
   end if;
   if name is null then
      raise_application_error(-20004, 'players_tab.check_rec(): name cannot be null.');
   end if;
   if seq is null then
      raise_application_error(-20004, 'players_tab.check_rec(): seq cannot be null.');
   end if;
   -- 3) Sub-type NULL checks
   -- 4) Compress Spaces, as needed
   -- 5) Custom Data Handling
   -- 6) Fold the case, as needed
   -- 7) Check for Domain Values
   -- 8) Custom Constraint Checks
   -- These constraints must be written to account for sub-types
   if not (total_cards >= 0)
   then
      raise_application_error(-20006, 'players_tab.check_rec(): Number of Total Cards for a Player must be greater than or equal to zero');
   end if;
   -- 9) Set eff_beg_dtm, if needed
   -- 10) Set aud_beg_usr and aud_beg_dtm
end check_rec;
----------------------------------------
-- Check Constraints for a players Record
function rec_status
      (id_in  in NUMBER
      )  return varchar2
is
   fs_save    boolean  := util.get_fold_strings;
   ud_save    boolean  := util.get_use_defaults;
   old_tab  players%ROWTYPE;
   new_tab  players%ROWTYPE;
begin
   select * into old_tab from players where id = id_in;
   new_tab := old_tab;
   util.set_fold_strings(FALSE);
   util.set_use_defaults(FALSE);
   check_rec (id  =>  new_tab.id
             ,game_id  =>  new_tab.game_id
             ,name  =>  new_tab.name
             ,seq  =>  new_tab.seq
             ,total_cards  =>  new_tab.total_cards
             );
   if not util.is_equal(old_tab.id, new_tab.id) then
      return 'Data Storage Error on id';
   end if;
   if not util.is_equal(old_tab.game_id, new_tab.game_id) then
      return 'Data Storage Error on game_id';
   end if;
   if not util.is_equal(old_tab.name, new_tab.name) then
      return 'Data Storage Error on name';
   end if;
   if not util.is_equal(old_tab.seq, new_tab.seq) then
      return 'Data Storage Error on seq';
   end if;
   if not util.is_equal(old_tab.total_cards, new_tab.total_cards) then
      return 'Data Storage Error on total_cards';
   end if;
   util.set_use_defaults(ud_save);
   util.set_fold_strings(fs_save);
   return 'OK';
exception
   when others then
      util.set_use_defaults(ud_save);
      util.set_fold_strings(fs_save);
      return sqlerrm;
end rec_status;
----------------------------------------
function get_id
      (players_nk1  in  VARCHAR2
      ,players_nk2  in  VARCHAR2
      ,players_nk3  in  VARCHAR2
      ) return NUMBER
   -- For all the Natural Key Columns, Return an ID
is
   retid  NUMBER(38);
begin
   select id
    into  retid
    from  players  PLY
    where PLY.game_id = games_tab.get_id
             (players_nk1
             ,players_nk2
             )
     and  PLY.name = players_nk3
    ;
   return retid;
exception when no_data_found then return null;
end get_id;
----------------------------------------
function get_nk
      (id_in  in  NUMBER)
   return VARCHAR2
   -- For an ID, return a delimited list of Natural Key Values
is
   rtxt  VARCHAR2(4000);
begin
   select substr(   games_tab.get_nk(PLY.game_id)
    || util.nk_sep || PLY.name
                         ,1 ,4000)
    into  rtxt
    from  players PLY
    where PLY.id = id_in;
   return rtxt;
exception when no_data_found then return null;
end get_nk;
----------------------------------------
-- Should be called exclusively by the BI Trigger
--   or the "ins" procedure below
procedure ins_bi_trigger
      (n_id  in out nocopy  NUMBER
      ,n_game_id  in out nocopy  NUMBER
      ,n_name  in out nocopy  VARCHAR2
      ,n_seq  in out nocopy  NUMBER
      ,n_total_cards  in out nocopy  NUMBER
      )
is
begin
   -- BI Trigger will have run_tab = TRUE, otherwise FALSE
   -- Set n_id, if needed
   if n_id is null then
      select players_seq.nextval
       into  n_id from dual;
   elsif n_id = 0 then
      raise_application_error(-20019, 'ID of zero is not allowed');
   end if;
   check_rec (id  =>  n_id
             ,game_id  =>  n_game_id
             ,name  =>  n_name
             ,seq  =>  n_seq
             ,total_cards  =>  n_total_cards
             );
end ins_bi_trigger;
----------------------------------------
-- Can be called from anywhere, except the BI Trigger
procedure ins
      (n_rec  in out nocopy  players%ROWTYPE
      )
is
begin
   run_tab := FALSE;
   ins_bi_trigger (n_id  =>  n_rec.id
       ,n_game_id  =>  n_rec.game_id
       ,n_name  =>  n_rec.name
       ,n_seq  =>  n_rec.seq
       ,n_total_cards  =>  n_rec.total_cards
       );
   insert into players
         (id
         ,game_id
         ,name
         ,seq
         ,total_cards
         )
   values
         (n_rec.id
         ,n_rec.game_id
         ,n_rec.name
         ,n_rec.seq
         ,n_rec.total_cards
         );
   run_tab := TRUE;
exception
   when others then
      run_tab := TRUE;
      raise;
end ins;
----------------------------------------
-- Should be called exclusively by the BU Trigger
--   or the "upd" procedure below
-- Note: the OLD values must be provided to check ignore_no_change
-- Note2:  Select for Update Lock is assumed on old values row
procedure upd_bu_trigger
      (o_id  in  NUMBER
      ,o_game_id  in  NUMBER
      ,n_game_id  in out nocopy  NUMBER
      ,o_name  in  VARCHAR2
      ,n_name  in out nocopy  VARCHAR2
      ,o_seq  in  NUMBER
      ,n_seq  in out nocopy  NUMBER
      ,o_total_cards  in  NUMBER
      ,n_total_cards  in out nocopy  NUMBER
      ,run_update  out  boolean
      )
is
begin
   run_update := TRUE;
   -- BU Trigger will have run_tab = TRUE, otherwise FALSE
   if     o_game_id = n_game_id
     and  o_name = n_name
     and  o_seq = n_seq
     and  util.is_equal(o_total_cards, n_total_cards)
   then
      if util.get_ignore_no_change then
         run_update := FALSE;
         return;
      end if;
      raise_application_error(-20008, 'players_tab.upd(): Must update one of'
            || ' game_id'
            || ', name'
            || ', seq'
            || ', total_cards'
            || '.');
   end if;
   check_rec (id  =>  o_id
             ,game_id  =>  n_game_id
             ,name  =>  n_name
             ,seq  =>  n_seq
             ,total_cards  =>  n_total_cards
             );
end upd_bu_trigger;
----------------------------------------
-- Can be called from anywhere, except the BU Trigger
-- Note: the OLD values must be provided to set new_rec values
procedure upd
      (o_rec  in             players%ROWTYPE
      ,n_rec  in out nocopy  players%ROWTYPE
      )
is
   c_rec    players%ROWTYPE;  -- Current Row Data
   run_upd  boolean;
begin
   if o_rec.id is null then return; end if;
   run_tab := FALSE;
   select * into c_rec from players t1
    where t1.id = o_rec.id FOR UPDATE;
   -- If old and new match, then replace new with current
   --   because there was no original intent to change new
   if o_rec.game_id = n_rec.game_id then
      n_rec.game_id := c_rec.game_id;
   end if;
   if o_rec.name = n_rec.name then
      n_rec.name := c_rec.name;
   end if;
   if o_rec.seq = n_rec.seq then
      n_rec.seq := c_rec.seq;
   end if;
   if util.is_equal(o_rec.total_cards, n_rec.total_cards) then
      n_rec.total_cards := c_rec.total_cards;
   end if;
   -- Update the new data based on the current data
   upd_bu_trigger (o_id  =>  c_rec.id
      ,o_game_id  =>  c_rec.game_id
      ,n_game_id  =>  n_rec.game_id
      ,o_name  =>  c_rec.name
      ,n_name  =>  n_rec.name
      ,o_seq  =>  c_rec.seq
      ,n_seq  =>  n_rec.seq
      ,o_total_cards  =>  c_rec.total_cards
      ,n_total_cards  =>  n_rec.total_cards
      ,run_update  =>  run_upd
      );
   if run_upd then
      update players
        set  game_id = n_rec.game_id
            ,name = n_rec.name
            ,seq = n_rec.seq
            ,total_cards = n_rec.total_cards
       where id = o_rec.id;
   end if;
   run_tab := TRUE;
exception
   when others then
      run_tab := TRUE;
      raise;
end upd;
----------------------------------------
-- Can be called from anywhere, except the BU Trigger
-- Note: the OLD values must be provided to check ignore_no_change
procedure upd
      (n_rec  in out nocopy  players%ROWTYPE
      )
is
   c_rec    players%ROWTYPE;  -- Current Row Data
   run_upd  boolean;
begin
   if n_rec.id is null then return; end if;
   run_tab := FALSE;
   select * into c_rec from players t1
    where t1.id = n_rec.id FOR UPDATE;
   upd_bu_trigger (o_id  =>  c_rec.id
      ,o_game_id  =>  c_rec.game_id
      ,n_game_id  =>  n_rec.game_id
      ,o_name  =>  c_rec.name
      ,n_name  =>  n_rec.name
      ,o_seq  =>  c_rec.seq
      ,n_seq  =>  n_rec.seq
      ,o_total_cards  =>  c_rec.total_cards
      ,n_total_cards  =>  n_rec.total_cards
      ,run_update  =>  run_upd
      );
   if run_upd then
      update players
        set  game_id = n_rec.game_id
            ,name = n_rec.name
            ,seq = n_rec.seq
            ,total_cards = n_rec.total_cards
       where id = c_rec.id;
   end if;
   run_tab := TRUE;
exception
   when others then
      run_tab := TRUE;
      raise;
end upd;
----------------------------------------
-- There is no delete trigger for this table
----------------------------------------
-- Can be called from anywhere, except the BD Trigger
procedure del
      (o_id  in  NUMBER
      )
is
begin
   -- NOTE: there is no delete trigger for this table
   if o_id is null then return; end if;
   run_tab := FALSE;
   delete from players PLY
    where PLY.id = o_id;
   run_tab := TRUE;
end del;
----------------------------------------
end players_tab;
/

set define on
