
--
--  Create CLUE.PLAYERS_DML Package
--

set define off


--DBMS_METADATA:CLUE.PLAYERS_DML

  CREATE OR REPLACE EDITIONABLE PACKAGE "CLUE"."PLAYERS_DML" 
is

   -- Package Players_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:31 AM

   --
   --
   -- ? Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


   -- Return the next Surrogate Key ID for players
   function get_next_id
      return NUMBER;
   -- Return the current Surrogate Key ID for players
   --   NOTE: This will return an ERROR if get_next_id has not been called
   function get_curr_id
      return NUMBER;

   -- Return the next Surrogate Key ID for the Natural Keys of players
   --   NOTE: The fields used in this function are the Natural Keys for players
   --         Alternatively, the Natural Key IDs for players are:
   --            -) game_id
   --            -) name
   function get_id
      (games_nk1  in  VARCHAR2
      ,games_nk2  in  VARCHAR2
      ,name  in  VARCHAR2
      ) return NUMBER;
   -- For all the Natural Key Column IDs, Return an ID
   function get_id2
      (game_id_in  in  NUMBER
      ,name_in  in  VARCHAR2
      ) return NUMBER;
   -- Return a concatenated string of Natural Keys for a players id
   function get_nk
      (id_in  in  NUMBER
      ) return VARCHAR2;

   -- Set a "view" record to null
   procedure clear
      (n_rec  in out nocopy  players_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_rec  in out nocopy  players_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record to null
   procedure clear
      (n_tab  in out nocopy  players%ROWTYPE
      );
   -- This function traps and returns any error message from the clear procedure
   function clear
      (n_tab  in out nocopy  players%ROWTYPE
      ) return varchar2;

   -- Set a "view" record from a players ID
   procedure get_rec_by_id
      (n_rec  in out nocopy  players_ACT%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_rec  in out nocopy  players_ACT%ROWTYPE
      ) return varchar2;
   -- Set a "table" record from a players ID
   procedure get_rec_by_id
      (n_tab  in out nocopy  players%ROWTYPE
      );
   -- This function traps and returns any error message from the get_rec_by_id procedure
   function get_rec_by_id
      (n_tab  in out nocopy  players%ROWTYPE
      ) return varchar2;

   -- NOTE: All INS procedures will run faster with a null ID
   --       because it avoids a history search for duplicate IDs
   --
   -- Insert a players ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the function will run faster,
   --       but the returned record may contain invalid data
   procedure ins
      (new_rec  in out nocopy  players_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_rec  in out nocopy  players_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- Insert a players Table Record
   --  (Fastest insert procedure and returned data is always valid)
   procedure ins
      (new_tab  in out nocopy  players%ROWTYPE
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (new_tab  in out nocopy  players%ROWTYPE
      ) return varchar2;
   -- Insert columns for players ACTIVE View
   --   without returning updated data in each column
   procedure ins
      (id_in  in  NUMBER default null
      ,game_id_in  in  NUMBER default null
      ,games_nk1_in  in  VARCHAR2 default null
      ,games_nk2_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER
      ,total_cards_in  in  NUMBER default null
      );
   -- This function traps and returns any error message from the ins procedure
   function ins
      (id_in  in  NUMBER default null
      ,game_id_in  in  NUMBER default null
      ,games_nk1_in  in  VARCHAR2 default null
      ,games_nk2_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER
      ,total_cards_in  in  NUMBER default null
      ) return varchar2;
   -- Insert columns for players ACTIVE View
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,games_nk1_io  in out nocopy  VARCHAR2
      ,games_nk2_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,games_nk1_io  in out nocopy  VARCHAR2
      ,games_nk2_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      ) return varchar2;
   -- Insert columns for players Table
   --   with updated data returned in each column
   procedure ins2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      );
   -- This function traps and returns any error message from the ins2 procedure
   function ins2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      ) return varchar2;

   -- Special Use Update for Specific Column Updates.
   --   Only differences between old and new data will be updated.
   --   Set upd_val_in TRUE to get updated data in new_rec
   procedure upd
      (old_rec  in  players_act%ROWTYPE
      ,new_rec  in out nocopy  players_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (old_rec  in  players_act%ROWTYPE
      ,new_rec  in out nocopy  players_act%ROWTYPE
      ,upd_vals_in  in  boolean default FALSE
      ) return varchar2;
   -- Special Use Update for Specific Column Updates.
   --   Only differences between old and new data will be updated.
   --   Set upd_val_in TRUE to get updated data in new_rec
   procedure upd
      (old_tab  in  players%ROWTYPE
      ,new_tab  in out nocopy  players%ROWTYPE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (old_tab  in  players%ROWTYPE
      ,new_tab  in out nocopy  players%ROWTYPE
      ) return varchar2;
   -- Update a players ACTIVE View Record
   -- NOTE: If UPD_VALS_IN is set to FALSE, the returned record
   --       may contain invalid data
   -- NOTE: Only FK NKs that are part of this NK will be used to find
   --       this ID from its NKs (FK IDs will be ignored)
   procedure upd
      (new_rec  in out nocopy  players_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_rec  in out nocopy  players_act%ROWTYPE
      ,upd_vals_in  in  boolean default TRUE
      ) return varchar2;
   -- Update a players Table Record
   --  (Fastest update procedure and returned data is always valid)
   -- NOTE: playersID must be supplied (NK lookup will not be performed)
   procedure upd
      (new_tab  in out nocopy  players%ROWTYPE
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (new_tab  in out nocopy  players%ROWTYPE
      ) return varchar2;
   -- Update columns for players ACTIVE View
   --   without returning updated data in each column
   procedure upd
      (id_in  in  NUMBER default null
      ,game_id_in  in  NUMBER default null
      ,games_nk1_in  in  VARCHAR2 default null
      ,games_nk2_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER
      ,total_cards_in  in  NUMBER default null
      );
   -- This function traps and returns any error message from the upd procedure
   function upd
      (id_in  in  NUMBER default null
      ,game_id_in  in  NUMBER default null
      ,games_nk1_in  in  VARCHAR2 default null
      ,games_nk2_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ,seq_in  in  NUMBER
      ,total_cards_in  in  NUMBER default null
      ) return varchar2;
   -- Update columns for players ACTIVE View
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,games_nk1_io  in out nocopy  VARCHAR2
      ,games_nk2_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,games_nk1_io  in out nocopy  VARCHAR2
      ,games_nk2_io  in out nocopy  VARCHAR2
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      ) return varchar2;
   -- Update columns for players Table
   --   with updated data returned in each column
   procedure upd2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      );
   -- This function traps and returns any error message from the upd2 procedure
   function upd2
      (id_io  in out nocopy  NUMBER
      ,game_id_io  in out nocopy  NUMBER
      ,name_io  in out nocopy  VARCHAR2
      ,seq_io  in out nocopy  NUMBER
      ,total_cards_io  in out nocopy  NUMBER
      ) return varchar2;

   -- Application Delete procedure without updated parameters
   procedure del
      (id_in  in  NUMBER default null
      ,game_id_in  in  NUMBER default null
      ,games_nk1_in  in  VARCHAR2 default null
      ,games_nk2_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      );
   -- This function traps and returns any error message from the del procedure
   function del
      (id_in  in  NUMBER default null
      ,game_id_in  in  NUMBER default null
      ,games_nk1_in  in  VARCHAR2 default null
      ,games_nk2_in  in  VARCHAR2 default null
      ,name_in  in  VARCHAR2 default null
      ) return varchar2;
   -- Application Delete procedure with updated parameters
   procedure del2
      (id_io  in out nocopy  NUMBER
      ,game_id_in  in NUMBER default null
      ,games_nk1_in  in VARCHAR2 default null
      ,games_nk2_in  in VARCHAR2 default null
      ,name_in  in VARCHAR2 default null
      );
   -- This function traps and returns any error message from the del2 procedure
   function del2
      (id_io  in out nocopy  NUMBER
      ,game_id_in  in NUMBER default null
      ,games_nk1_in  in VARCHAR2 default null
      ,games_nk2_in  in VARCHAR2 default null
      ,name_in  in VARCHAR2 default null
      ) return varchar2;

   -- Special Data Warehouse Dimension Function
   --   Attempts to find matching record based on natural keys
   --   If found, performs updates on non-NK columns that changed
   --   If not found, inserts new record
   --   Returns ID of record
   procedure load_dim
      (dim_tab  in out nocopy  players%ROWTYPE
      );
   -- This function traps and returns any error message from the load_dim procedure
   function load_dim
      (dim_tab  in out nocopy  players%ROWTYPE
      ) return varchar2;

end players_dml;
/


--  Grants


--  Synonyms

--DBMS_METADATA:DMSTEX.PLAYERS_DML

  CREATE OR REPLACE EDITIONABLE SYNONYM "DMSTEX"."PLAYERS_DML" FOR "CLUE"."PLAYERS_DML";


set define on
