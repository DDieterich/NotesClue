
select '=== CLUE create_flow_lov ===' as SCRIPT_NAME from dual;

-- Script File "create_flow_lov"
--    APEX flow export file used to create Shared List of Values

   -- Application: Clue Notes For Oracle
   -- Generated by DTGen (http://dmstex.com/services/dtgen)
   -- December  16, 2013  11:32:40 AM

   --
   --
   -- © Duane.Dieterich@DMSTEX.com 2013
   --
   -- All Rights Reserved
   --
   -- No part of this software may be reproduced, copied, modified or adapted,
   -- without the prior written consent of the author, unless otherwise
   -- indicated for stand-alone materials.
   --
   -- You may quote extracts from this software with attribution to
   -- Duane.Dieterich@DMSTEX.com
   --
   -- For any other mode of sharing, please contact Duane.Dieterich@DMSTEX.com.
   --
   -- Commercial use and distribution of this software is not allowed without
   -- express and prior written consent of the author.
   --
   -- THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   -- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
   -- AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
   -- THE COPYRIGHT HOLDER OR DMSTEX BUSINESS SOLUTIONS LLC, ITS MEMBERS,
   -- MANAGERS, OR EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   -- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   -- TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   -- PROFITS; CORRUPTION OF DATA, OR BUSINESS INTERRUPTION) HOWEVER CAUSED
   -- AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
   -- THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
   -- DAMAGE.
   --
   --


begin
   util_flow.init('APP');
end;
/

begin
   dbms_output.put_line('  ...Shared Lists of values');
   --application/shared_components/user_interface/lov/domains
end;
/
   ----------------------------------------

begin

   if util_flow.get_lov_id('ZZES_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared STATIC LOV "ZZES_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared STATIC LOV "ZZES_DOM_LOV"');
      util_flow.lov_id := wwv_flow_id.next_val;

      wwv_flow_api.create_list_of_values (
         p_id       => util_flow.lov_id,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ZZES_DOM_LOV',
         p_lov_query=> '.' || util_flow.lov_id || '.');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>10,
         p_lov_disp_value=>'ACT - Active (Current) Status',
         p_lov_return_value=>'ACT',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>20,
         p_lov_disp_value=>'EFF - Formerly Effective (History) Status',
         p_lov_return_value=>'EFF',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>30,
         p_lov_disp_value=>'POP - Popped (UNDO) Status',
         p_lov_return_value=>'POP',
         p_lov_data_comment=> '');

   end if;

end;
/

   ----------------------------------------

begin

   if util_flow.get_lov_id('ZZLA_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared STATIC LOV "ZZLA_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared STATIC LOV "ZZLA_DOM_LOV"');
      util_flow.lov_id := wwv_flow_id.next_val;

      wwv_flow_api.create_list_of_values (
         p_id       => util_flow.lov_id,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ZZLA_DOM_LOV',
         p_lov_query=> '.' || util_flow.lov_id || '.');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>10,
         p_lov_disp_value=>'Y - Last Active Record Affirmed',
         p_lov_return_value=>'Y',
         p_lov_data_comment=> '');

   end if;

end;
/

   ----------------------------------------

begin

   if util_flow.get_lov_id('ZZLS_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared STATIC LOV "ZZLS_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared STATIC LOV "ZZLS_DOM_LOV"');
      util_flow.lov_id := wwv_flow_id.next_val;

      wwv_flow_api.create_list_of_values (
         p_id       => util_flow.lov_id,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ZZLS_DOM_LOV',
         p_lov_query=> '.' || util_flow.lov_id || '.');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>10,
         p_lov_disp_value=>'ACT - Active (Current) Status',
         p_lov_return_value=>'ACT',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>20,
         p_lov_disp_value=>'LOG - Logged (History) Status',
         p_lov_return_value=>'LOG',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>30,
         p_lov_disp_value=>'POP - Popped (UNDO) Status',
         p_lov_return_value=>'POP',
         p_lov_data_comment=> '');

   end if;

end;
/

   ----------------------------------------

begin

   if util_flow.get_lov_id('ZZPD_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared STATIC LOV "ZZPD_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared STATIC LOV "ZZPD_DOM_LOV"');
      util_flow.lov_id := wwv_flow_id.next_val;

      wwv_flow_api.create_list_of_values (
         p_id       => util_flow.lov_id,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ZZPD_DOM_LOV',
         p_lov_query=> '.' || util_flow.lov_id || '.');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>10,
         p_lov_disp_value=>'INSERT - An "INSERT" statement was undone.',
         p_lov_return_value=>'INSERT',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>20,
         p_lov_disp_value=>'UPDATE - An "UPDATE" statement was undone.',
         p_lov_return_value=>'UPDATE',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>30,
         p_lov_disp_value=>'DELETE - A "DELETE" statement was undone.',
         p_lov_return_value=>'DELETE',
         p_lov_data_comment=> '');

   end if;

end;
/


   ----------------------------------------

begin
   if util_flow.get_lov_id('ZZSR_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared DOM LOV "ZZSR_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared DOM LOV "ZZSR_DOM_LOV"');
      util_flow.s := 'select srid || '' - '' || substr(coord_ref_sys_name,1,80)   d' || CHR(10) ||
                     '      ,srid   r' || CHR(10) ||
                     ' from  sdo_coord_sys      cs' || CHR(10) ||
                     '      ,sdo_coord_ref_sys  crs' || CHR(10) ||
                     ' where cs.dimension              = 2' || CHR(10) ||
                     '  and  cs.coord_sys_id           = crs.coord_sys_id' || CHR(10) ||
                     '  and  crs.is_valid              in (''TRUE'', ''1'')' || CHR(10) ||
                     '  and  crs.supports_sdo_geometry in (''TRUE'', ''1'')' || CHR(10) ||
                     ' order by srid';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ZZSR_DOM_LOV',
         p_lov_query=> util_flow.s);

   end if;

end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('DISPOSITIONS_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared DOM LOV "DISPOSITIONS_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared DOM LOV "DISPOSITIONS_DOM_LOV"');
      util_flow.s := 'select value || '' - '' || substr(description,1,80) d, value r' || CHR(10) ||
                     'from table("#OWNER#".Dispositions_dom.table_recs)' || CHR(10) ||
                     'order by value';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'DISPOSITIONS_DOM_LOV',
         p_lov_query=> util_flow.s);

   end if;

end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('FLAGGED_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared DOM LOV "FLAGGED_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared DOM LOV "FLAGGED_DOM_LOV"');
      util_flow.s := 'select value || '' - '' || substr(description,1,80) d, value r' || CHR(10) ||
                     'from table("#OWNER#".Flagged_dom.table_recs)' || CHR(10) ||
                     'order by value';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'FLAGGED_DOM_LOV',
         p_lov_query=> util_flow.s);

   end if;

end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('RESOLUTIONS_DOM_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared DOM LOV "RESOLUTIONS_DOM_LOV"');
   else

      dbms_output.put_line('  ...Create Shared DOM LOV "RESOLUTIONS_DOM_LOV"');
      util_flow.s := 'select value || '' - '' || substr(description,1,80) d, value r' || CHR(10) ||
                     'from table("#OWNER#".Resolutions_dom.table_recs)' || CHR(10) ||
                     'order by value';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'RESOLUTIONS_DOM_LOV',
         p_lov_query=> util_flow.s);

   end if;

end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('USERS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "USERS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "USERS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(users_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".users' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'USERS_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('CARD_TYPES_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "CARD_TYPES_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "CARD_TYPES_LOV"');
      util_flow.s := 'select id || '' - '' || substr(card_types_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".card_types' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'CARD_TYPES_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('GAMES_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "GAMES_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "GAMES_LOV"');
      util_flow.s := 'select id || '' - '' || substr(games_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".games' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'GAMES_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('PLAYERS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "PLAYERS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "PLAYERS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(players_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".players' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'PLAYERS_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('CARDS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "CARDS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "CARDS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(cards_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".cards' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'CARDS_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('ACTIONS_ST_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared STATIC LOV "ACTIONS_ST_LOV"');
   else

      dbms_output.put_line('  ...Create Shared STATIC LOV "ACTIONS_ST_LOV"');
      util_flow.lov_id := wwv_flow_id.next_val;

      wwv_flow_api.create_list_of_values (
         p_id       => util_flow.lov_id,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ACTIONS_ST_LOV',
         p_lov_query=> '.' || util_flow.lov_id || '.');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>10,
         p_lov_disp_value=>'accusation - Accusation Action',
         p_lov_return_value=>'accusation',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>20,
         p_lov_disp_value=>'revelation - Revelation Action',
         p_lov_return_value=>'revelation',
         p_lov_data_comment=> '');

      wwv_flow_api.create_static_lov_data (
         p_id=>wwv_flow_id.next_val,
         p_lov_id=>util_flow.lov_id,
         p_lov_disp_sequence=>30,
         p_lov_disp_value=>'suggestion - Suggestion Action',
         p_lov_return_value=>'suggestion',
         p_lov_data_comment=> '');

   end if;

end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('ACTIONS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "ACTIONS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "ACTIONS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(actions_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".actions' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ACTIONS_LOV',
         p_lov_query=> util_flow.s);

   end if;

   if util_flow.get_lov_id('RES_ACTIONS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared Self-Ref FK LOV "RES_ACTIONS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared Self-Ref FK LOV "RES_ACTIONS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(actions_dml.get_res_nk_path(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".actions' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'RES_ACTIONS_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('ACTION_CARDS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "ACTION_CARDS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "ACTION_CARDS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(action_cards_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".action_cards' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'ACTION_CARDS_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

   ----------------------------------------

begin
   if util_flow.get_lov_id('PCARD_ACTIONS_LOV') is not null then
      dbms_output.put_line('  ...Skipping Shared FK LOV "PCARD_ACTIONS_LOV"');
   else

      dbms_output.put_line('  ...Create Shared FK LOV "PCARD_ACTIONS_LOV"');
      util_flow.s := 'select id || '' - '' || substr(pcard_actions_dml.get_nk(id),1,80) d, id r' || CHR(10) ||
                     'from "#OWNER#".pcard_actions' || CHR(10) ||
                     'order by 1';

      wwv_flow_api.create_list_of_values (
         p_id       => wwv_flow_id.next_val,
         p_flow_id  => wwv_flow.g_flow_id,
         p_lov_name => 'PCARD_ACTIONS_LOV',
         p_lov_query=> util_flow.s);

   end if;


end;
/

begin
   util_flow.fin;
end;
/

